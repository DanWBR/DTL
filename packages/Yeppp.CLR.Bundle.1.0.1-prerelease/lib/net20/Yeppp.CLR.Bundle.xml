<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yeppp.CLR.Bundle</name>
    </assembly>
    <members>
        <member name="T:Yeppp.Core">
            <summary>Basic arithmetic operations</summary>
            <summary>Basic arithmetic operations</summary>
            <summary>Basic arithmetic operations</summary>
            <summary>Basic arithmetic operations</summary>
            <summary>Basic arithmetic operations</summary>
            <summary>Basic arithmetic operations</summary>
            <summary>Basic arithmetic operations</summary>
            <summary>Basic arithmetic operations</summary>
            <summary>Basic arithmetic operations</summary>
            <summary>Basic arithmetic operations</summary>
        </member>
        <member name="M:Yeppp.Core.Add_V8sV8s_V8s(System.SByte[],System.Int32,System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 8-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or sumArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V8sV8s_V16s(System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V8uV8u_V16u(System.Byte[],System.Int32,System.Byte[],System.Int32,System.UInt16[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two unsigned 8-bit integer arrays. Produces an array of unsigned 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V16sV16s_V16s(System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V16sV16s_V32s(System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V16uV16u_V32u(System.UInt16[],System.Int32,System.UInt16[],System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two unsigned 16-bit integer arrays. Produces an array of unsigned 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32sV32s_V32s(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32sV32s_V64s(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32uV32u_V64u(System.UInt32[],System.Int32,System.UInt32[],System.Int32,System.UInt64[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two unsigned 32-bit integer arrays. Produces an array of unsigned 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V64sV64s_V64s(System.Int64[],System.Int32,System.Int64[],System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two signed 64-bit integer arrays. Produces an array of signed 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32fV32f_V32f(System.Single[],System.Int32,System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two single precision (32-bit) floating-point arrays. Produces an array of single precision (32-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V64fV64f_V64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two double precision (64-bit) floating-point arrays. Produces an array of double precision (64-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V8sS8s_V8s(System.SByte[],System.Int32,System.SByte,System.SByte[],System.Int32,System.Int32)">
            <summary>Adds a constant to signed 8-bit integer array elements. Produces an array of signed 8-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or sumArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V8sS8s_V16s(System.SByte[],System.Int32,System.SByte,System.Int16[],System.Int32,System.Int32)">
            <summary>Adds a constant to signed 8-bit integer array elements. Produces an array of signed 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V8uS8u_V16u(System.Byte[],System.Int32,System.Byte,System.UInt16[],System.Int32,System.Int32)">
            <summary>Adds a constant to unsigned 8-bit integer array elements. Produces an array of unsigned 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V16sS16s_V16s(System.Int16[],System.Int32,System.Int16,System.Int16[],System.Int32,System.Int32)">
            <summary>Adds a constant to signed 16-bit integer array elements. Produces an array of signed 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V16sS16s_V32s(System.Int16[],System.Int32,System.Int16,System.Int32[],System.Int32,System.Int32)">
            <summary>Adds a constant to signed 16-bit integer array elements. Produces an array of signed 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V16uS16u_V32u(System.UInt16[],System.Int32,System.UInt16,System.UInt32[],System.Int32,System.Int32)">
            <summary>Adds a constant to unsigned 16-bit integer array elements. Produces an array of unsigned 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32sS32s_V32s(System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Adds a constant to signed 32-bit integer array elements. Produces an array of signed 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32uS32u_V64u(System.UInt32[],System.Int32,System.UInt32,System.UInt64[],System.Int32,System.Int32)">
            <summary>Adds a constant to unsigned 32-bit integer array elements. Produces an array of unsigned 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32sS32s_V64s(System.Int32[],System.Int32,System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Adds a constant to signed 32-bit integer array elements. Produces an array of signed 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V64sS64s_V64s(System.Int64[],System.Int32,System.Int64,System.Int64[],System.Int32,System.Int32)">
            <summary>Adds a constant to signed 64-bit integer array elements. Produces an array of signed 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32fS32f_V32f(System.Single[],System.Int32,System.Single,System.Single[],System.Int32,System.Int32)">
            <summary>Adds a constant to single precision (32-bit) floating-point array elements. Produces an array of single precision (32-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V64fS64f_V64f(System.Double[],System.Int32,System.Double,System.Double[],System.Int32,System.Int32)">
            <summary>Adds a constant to double precision (64-bit) floating-point array elements. Produces an array of double precision (64-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or sumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or sumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, sumOffset is negative, sumOffset + length exceeds the length of sumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV8sV8s_IV8s(System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV16sV16s_IV16s(System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV32sV32s_IV32s(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV64sV64s_IV64s(System.Int64[],System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV32fV32f_IV32f(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV64fV64f_IV64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Adds corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV8sS8s_IV8s(System.SByte[],System.Int32,System.SByte,System.Int32)">
            <summary>Adds a constant to signed 8-bit integer array elements and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV16sS16s_IV16s(System.Int16[],System.Int32,System.Int16,System.Int32)">
            <summary>Adds a constant to signed 16-bit integer array elements and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV32sS32s_IV32s(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>Adds a constant to signed 32-bit integer array elements and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV64sS64s_IV64s(System.Int64[],System.Int32,System.Int64,System.Int32)">
            <summary>Adds a constant to signed 64-bit integer array elements and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV32fS32f_IV32f(System.Single[],System.Int32,System.Single,System.Int32)">
            <summary>Adds a constant to single precision (32-bit) floating-point array elements and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV64fS64f_IV64f(System.Double[],System.Int32,System.Double,System.Int32)">
            <summary>Adds a constant to double precision (64-bit) floating-point array elements and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V8sV8s_V8s(System.SByte*,System.SByte*,System.SByte*,System.Int32)">
            <summary>Adds corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 8-bit integer elements.</summary>
            <param name="x">Pointer to the first addend array of signed 8-bit integer elements.</param>
            <param name="y">Pointer to the second addend array of signed 8-bit integer elements.</param>
            <param name="sum">Pointer to the summand array of signed 8-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and sum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or sum is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V8sV8s_V16s(System.SByte*,System.SByte*,System.Int16*,System.Int32)">
            <summary>Adds corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 16-bit integer elements.</summary>
            <param name="x">Pointer to the first addend array of signed 8-bit integer elements.</param>
            <param name="y">Pointer to the second addend array of signed 8-bit integer elements.</param>
            <param name="sum">Pointer to the summand array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and sum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V8uV8u_V16u(System.Byte*,System.Byte*,System.UInt16*,System.Int32)">
            <summary>Adds corresponding elements in two unsigned 8-bit integer arrays. Produces an array of unsigned 16-bit integer elements.</summary>
            <param name="x">Pointer to the first addend array of unsigned 8-bit integer elements.</param>
            <param name="y">Pointer to the second addend array of unsigned 8-bit integer elements.</param>
            <param name="sum">Pointer to the summand array of unsigned 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and sum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V16sV16s_V16s(System.Int16*,System.Int16*,System.Int16*,System.Int32)">
            <summary>Adds corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 16-bit integer elements.</summary>
            <param name="x">Pointer to the first addend array of signed 16-bit integer elements.</param>
            <param name="y">Pointer to the second addend array of signed 16-bit integer elements.</param>
            <param name="sum">Pointer to the summand array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and sum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V16sV16s_V32s(System.Int16*,System.Int16*,System.Int32*,System.Int32)">
            <summary>Adds corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 32-bit integer elements.</summary>
            <param name="x">Pointer to the first addend array of signed 16-bit integer elements.</param>
            <param name="y">Pointer to the second addend array of signed 16-bit integer elements.</param>
            <param name="sum">Pointer to the summand array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and sum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V16uV16u_V32u(System.UInt16*,System.UInt16*,System.UInt32*,System.Int32)">
            <summary>Adds corresponding elements in two unsigned 16-bit integer arrays. Produces an array of unsigned 32-bit integer elements.</summary>
            <param name="x">Pointer to the first addend array of unsigned 16-bit integer elements.</param>
            <param name="y">Pointer to the second addend array of unsigned 16-bit integer elements.</param>
            <param name="sum">Pointer to the summand array of unsigned 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and sum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32sV32s_V32s(System.Int32*,System.Int32*,System.Int32*,System.Int32)">
            <summary>Adds corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 32-bit integer elements.</summary>
            <param name="x">Pointer to the first addend array of signed 32-bit integer elements.</param>
            <param name="y">Pointer to the second addend array of signed 32-bit integer elements.</param>
            <param name="sum">Pointer to the summand array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and sum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32sV32s_V64s(System.Int32*,System.Int32*,System.Int64*,System.Int32)">
            <summary>Adds corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 64-bit integer elements.</summary>
            <param name="x">Pointer to the first addend array of signed 32-bit integer elements.</param>
            <param name="y">Pointer to the second addend array of signed 32-bit integer elements.</param>
            <param name="sum">Pointer to the summand array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and sum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32uV32u_V64u(System.UInt32*,System.UInt32*,System.UInt64*,System.Int32)">
            <summary>Adds corresponding elements in two unsigned 32-bit integer arrays. Produces an array of unsigned 64-bit integer elements.</summary>
            <param name="x">Pointer to the first addend array of unsigned 32-bit integer elements.</param>
            <param name="y">Pointer to the second addend array of unsigned 32-bit integer elements.</param>
            <param name="sum">Pointer to the summand array of unsigned 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and sum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V64sV64s_V64s(System.Int64*,System.Int64*,System.Int64*,System.Int32)">
            <summary>Adds corresponding elements in two signed 64-bit integer arrays. Produces an array of signed 64-bit integer elements.</summary>
            <param name="x">Pointer to the first addend array of signed 64-bit integer elements.</param>
            <param name="y">Pointer to the second addend array of signed 64-bit integer elements.</param>
            <param name="sum">Pointer to the summand array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and sum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32fV32f_V32f(System.Single*,System.Single*,System.Single*,System.Int32)">
            <summary>Adds corresponding elements in two single precision (32-bit) floating-point arrays. Produces an array of single precision (32-bit) floating-point elements.</summary>
            <param name="x">Pointer to the first addend array of single precision (32-bit) floating-point elements.</param>
            <param name="y">Pointer to the second addend array of single precision (32-bit) floating-point elements.</param>
            <param name="sum">Pointer to the summand array of single precision (32-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x, y, and sum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V64fV64f_V64f(System.Double*,System.Double*,System.Double*,System.Int32)">
            <summary>Adds corresponding elements in two double precision (64-bit) floating-point arrays. Produces an array of double precision (64-bit) floating-point elements.</summary>
            <param name="x">Pointer to the first addend array of double precision (64-bit) floating-point elements.</param>
            <param name="y">Pointer to the second addend array of double precision (64-bit) floating-point elements.</param>
            <param name="sum">Pointer to the summand array of double precision (64-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x, y, and sum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V8sS8s_V8s(System.SByte*,System.SByte,System.SByte*,System.Int32)">
            <summary>Adds a constant to signed 8-bit integer array elements. Produces an array of signed 8-bit integer elements.</summary>
            <param name="x">Pointer to the addend array of signed 8-bit integer elements.</param>
            <param name="y">The signed 8-bit integer constant to be added.</param>
            <param name="sum">Pointer to the summand array of signed 8-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and sum.</param>
            <exception cref="T:System.NullReferenceException">If x or sum is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V8sS8s_V16s(System.SByte*,System.SByte,System.Int16*,System.Int32)">
            <summary>Adds a constant to signed 8-bit integer array elements. Produces an array of signed 16-bit integer elements.</summary>
            <param name="x">Pointer to the addend array of signed 8-bit integer elements.</param>
            <param name="y">The signed 8-bit integer constant to be added.</param>
            <param name="sum">Pointer to the summand array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and sum.</param>
            <exception cref="T:System.NullReferenceException">If x or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V8uS8u_V16u(System.Byte*,System.Byte,System.UInt16*,System.Int32)">
            <summary>Adds a constant to unsigned 8-bit integer array elements. Produces an array of unsigned 16-bit integer elements.</summary>
            <param name="x">Pointer to the addend array of unsigned 8-bit integer elements.</param>
            <param name="y">The unsigned 8-bit integer constant to be added.</param>
            <param name="sum">Pointer to the summand array of unsigned 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and sum.</param>
            <exception cref="T:System.NullReferenceException">If x or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V16sS16s_V16s(System.Int16*,System.Int16,System.Int16*,System.Int32)">
            <summary>Adds a constant to signed 16-bit integer array elements. Produces an array of signed 16-bit integer elements.</summary>
            <param name="x">Pointer to the addend array of signed 16-bit integer elements.</param>
            <param name="y">The signed 16-bit integer constant to be added.</param>
            <param name="sum">Pointer to the summand array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and sum.</param>
            <exception cref="T:System.NullReferenceException">If x or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V16sS16s_V32s(System.Int16*,System.Int16,System.Int32*,System.Int32)">
            <summary>Adds a constant to signed 16-bit integer array elements. Produces an array of signed 32-bit integer elements.</summary>
            <param name="x">Pointer to the addend array of signed 16-bit integer elements.</param>
            <param name="y">The signed 16-bit integer constant to be added.</param>
            <param name="sum">Pointer to the summand array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and sum.</param>
            <exception cref="T:System.NullReferenceException">If x or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V16uS16u_V32u(System.UInt16*,System.UInt16,System.UInt32*,System.Int32)">
            <summary>Adds a constant to unsigned 16-bit integer array elements. Produces an array of unsigned 32-bit integer elements.</summary>
            <param name="x">Pointer to the addend array of unsigned 16-bit integer elements.</param>
            <param name="y">The unsigned 16-bit integer constant to be added.</param>
            <param name="sum">Pointer to the summand array of unsigned 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and sum.</param>
            <exception cref="T:System.NullReferenceException">If x or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32sS32s_V32s(System.Int32*,System.Int32,System.Int32*,System.Int32)">
            <summary>Adds a constant to signed 32-bit integer array elements. Produces an array of signed 32-bit integer elements.</summary>
            <param name="x">Pointer to the addend array of signed 32-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant to be added.</param>
            <param name="sum">Pointer to the summand array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and sum.</param>
            <exception cref="T:System.NullReferenceException">If x or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32uS32u_V64u(System.UInt32*,System.UInt32,System.UInt64*,System.Int32)">
            <summary>Adds a constant to unsigned 32-bit integer array elements. Produces an array of unsigned 64-bit integer elements.</summary>
            <param name="x">Pointer to the addend array of unsigned 32-bit integer elements.</param>
            <param name="y">The unsigned 32-bit integer constant to be added.</param>
            <param name="sum">Pointer to the summand array of unsigned 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and sum.</param>
            <exception cref="T:System.NullReferenceException">If x or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32sS32s_V64s(System.Int32*,System.Int32,System.Int64*,System.Int32)">
            <summary>Adds a constant to signed 32-bit integer array elements. Produces an array of signed 64-bit integer elements.</summary>
            <param name="x">Pointer to the addend array of signed 32-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant to be added.</param>
            <param name="sum">Pointer to the summand array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and sum.</param>
            <exception cref="T:System.NullReferenceException">If x or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V64sS64s_V64s(System.Int64*,System.Int64,System.Int64*,System.Int32)">
            <summary>Adds a constant to signed 64-bit integer array elements. Produces an array of signed 64-bit integer elements.</summary>
            <param name="x">Pointer to the addend array of signed 64-bit integer elements.</param>
            <param name="y">The signed 64-bit integer constant to be added.</param>
            <param name="sum">Pointer to the summand array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and sum.</param>
            <exception cref="T:System.NullReferenceException">If x or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V32fS32f_V32f(System.Single*,System.Single,System.Single*,System.Int32)">
            <summary>Adds a constant to single precision (32-bit) floating-point array elements. Produces an array of single precision (32-bit) floating-point elements.</summary>
            <param name="x">Pointer to the addend array of single precision (32-bit) floating-point elements.</param>
            <param name="y">The single precision (32-bit) floating-point constant to be added.</param>
            <param name="sum">Pointer to the summand array of single precision (32-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and sum.</param>
            <exception cref="T:System.NullReferenceException">If x or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_V64fS64f_V64f(System.Double*,System.Double,System.Double*,System.Int32)">
            <summary>Adds a constant to double precision (64-bit) floating-point array elements. Produces an array of double precision (64-bit) floating-point elements.</summary>
            <param name="x">Pointer to the addend array of double precision (64-bit) floating-point elements.</param>
            <param name="y">The double precision (64-bit) floating-point constant to be added.</param>
            <param name="sum">Pointer to the summand array of double precision (64-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and sum.</param>
            <exception cref="T:System.NullReferenceException">If x or sum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or sum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV8sV8s_IV8s(System.SByte*,System.SByte*,System.Int32)">
            <summary>Adds corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first addend array of signed 8-bit integer elements.</param>
            <param name="y">Pointer to the second addend array of signed 8-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV16sV16s_IV16s(System.Int16*,System.Int16*,System.Int32)">
            <summary>Adds corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first addend array of signed 16-bit integer elements.</param>
            <param name="y">Pointer to the second addend array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV32sV32s_IV32s(System.Int32*,System.Int32*,System.Int32)">
            <summary>Adds corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first addend array of signed 32-bit integer elements.</param>
            <param name="y">Pointer to the second addend array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV64sV64s_IV64s(System.Int64*,System.Int64*,System.Int32)">
            <summary>Adds corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first addend array of signed 64-bit integer elements.</param>
            <param name="y">Pointer to the second addend array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV32fV32f_IV32f(System.Single*,System.Single*,System.Int32)">
            <summary>Adds corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first addend array of single precision (32-bit) floating-point elements.</param>
            <param name="y">Pointer to the second addend array of single precision (32-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV64fV64f_IV64f(System.Double*,System.Double*,System.Int32)">
            <summary>Adds corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first addend array of double precision (64-bit) floating-point elements.</param>
            <param name="y">Pointer to the second addend array of double precision (64-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV8sS8s_IV8s(System.SByte*,System.SByte,System.Int32)">
            <summary>Adds a constant to signed 8-bit integer array elements and writes the result to the same array.</summary>
            <param name="x">Pointer to the addend array of signed 8-bit integer elements.</param>
            <param name="y">The signed 8-bit integer constant to be added.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV16sS16s_IV16s(System.Int16*,System.Int16,System.Int32)">
            <summary>Adds a constant to signed 16-bit integer array elements and writes the result to the same array.</summary>
            <param name="x">Pointer to the addend array of signed 16-bit integer elements.</param>
            <param name="y">The signed 16-bit integer constant to be added.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV32sS32s_IV32s(System.Int32*,System.Int32,System.Int32)">
            <summary>Adds a constant to signed 32-bit integer array elements and writes the result to the same array.</summary>
            <param name="x">Pointer to the addend array of signed 32-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant to be added.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV64sS64s_IV64s(System.Int64*,System.Int64,System.Int32)">
            <summary>Adds a constant to signed 64-bit integer array elements and writes the result to the same array.</summary>
            <param name="x">Pointer to the addend array of signed 64-bit integer elements.</param>
            <param name="y">The signed 64-bit integer constant to be added.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV32fS32f_IV32f(System.Single*,System.Single,System.Int32)">
            <summary>Adds a constant to single precision (32-bit) floating-point array elements and writes the result to the same array.</summary>
            <param name="x">Pointer to the addend array of single precision (32-bit) floating-point elements.</param>
            <param name="y">The single precision (32-bit) floating-point constant to be added.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Add_IV64fS64f_IV64f(System.Double*,System.Double,System.Int32)">
            <summary>Adds a constant to double precision (64-bit) floating-point array elements and writes the result to the same array.</summary>
            <param name="x">Pointer to the addend array of double precision (64-bit) floating-point elements.</param>
            <param name="y">The double precision (64-bit) floating-point constant to be added.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.DotProduct_V32fV32f_S32f(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>Computes the dot product of two vectors of single precision (32-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.DotProduct_V64fV64f_S64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Computes the dot product of two vectors of double precision (64-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.DotProduct_V32fV32f_S32f(System.Single*,System.Single*,System.Int32)">
            <summary>Computes the dot product of two vectors of single precision (32-bit) floating-point elements.</summary>
            <param name="x">Pointer to the first vector of elements.</param>
            <param name="y">Pointer to the second vector of elements.</param>
            <param name="length">Length of the vectors specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.DotProduct_V64fV64f_S64f(System.Double*,System.Double*,System.Int32)">
            <summary>Computes the dot product of two vectors of double precision (64-bit) floating-point elements.</summary>
            <param name="x">Pointer to the first vector of elements.</param>
            <param name="y">Pointer to the second vector of elements.</param>
            <param name="length">Length of the vectors specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V8s_S8s(System.SByte[],System.Int32,System.Int32)">
            <summary>Computes the maximum of signed 8-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V8u_S8u(System.Byte[],System.Int32,System.Int32)">
            <summary>Computes the maximum of unsigned 8-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V16s_S16s(System.Int16[],System.Int32,System.Int32)">
            <summary>Computes the maximum of signed 16-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V16u_S16u(System.UInt16[],System.Int32,System.Int32)">
            <summary>Computes the maximum of unsigned 16-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32s_S32s(System.Int32[],System.Int32,System.Int32)">
            <summary>Computes the maximum of signed 32-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32u_S32u(System.UInt32[],System.Int32,System.Int32)">
            <summary>Computes the maximum of unsigned 32-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64s_S64s(System.Int64[],System.Int32,System.Int32)">
            <summary>Computes the maximum of signed 64-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64u_S64u(System.UInt64[],System.Int32,System.Int32)">
            <summary>Computes the maximum of unsigned 64-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32f_S32f(System.Single[],System.Int32,System.Int32)">
            <summary>Computes the maximum of single precision (32-bit) floating-point array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64f_S64f(System.Double[],System.Int32,System.Int32)">
            <summary>Computes the maximum of double precision (64-bit) floating-point array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V8sV8s_V8s(System.SByte[],System.Int32,System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 8-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or maximumArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V8uV8u_V8u(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 8-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or maximumArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V16sV16s_V16s(System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 16-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V16uV16u_V16u(System.UInt16[],System.Int32,System.UInt16[],System.Int32,System.UInt16[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 16-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32sV32s_V32s(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 32-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32uV32u_V32u(System.UInt32[],System.Int32,System.UInt32[],System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 32-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64sV32s_V64s(System.Int64[],System.Int32,System.Int32[],System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 64-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64uV32u_V64u(System.UInt64[],System.Int32,System.UInt32[],System.Int32,System.UInt64[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 64-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32fV32f_V32f(System.Single[],System.Int32,System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two single precision (32-bit) floating-point arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64fV64f_V64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two double precision (64-bit) floating-point arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V8sS8s_V8s(System.SByte[],System.Int32,System.SByte,System.SByte[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of signed 8-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or maximumArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V8uS8u_V8u(System.Byte[],System.Int32,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 8-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or maximumArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V16sS16s_V16s(System.Int16[],System.Int32,System.Int16,System.Int16[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of signed 16-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V16uS16u_V16u(System.UInt16[],System.Int32,System.UInt16,System.UInt16[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 16-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32sS32s_V32s(System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of signed 32-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32uS32u_V32u(System.UInt32[],System.Int32,System.UInt32,System.UInt32[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 32-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64sS32s_V64s(System.Int64[],System.Int32,System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of signed 64-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64uS32u_V64u(System.UInt64[],System.Int32,System.UInt32,System.UInt64[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 64-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32fS32f_V32f(System.Single[],System.Int32,System.Single,System.Single[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of single precision (32-bit) floating-point array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64fS64f_V64f(System.Double[],System.Int32,System.Double,System.Double[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of double precision (64-bit) floating-point array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or maximumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or maximumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, maximumOffset is negative, maximumOffset + length exceeds the length of maximumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV8sV8s_IV8s(System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV8uV8u_IV8u(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 8-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV16sV16s_IV16s(System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV16uV16u_IV16u(System.UInt16[],System.Int32,System.UInt16[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 16-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV32sV32s_IV32s(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV32uV32u_IV32u(System.UInt32[],System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 32-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV64sV32s_IV64s(System.Int64[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV64uV32u_IV64u(System.UInt64[],System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 64-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV32fV32f_IV32f(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV64fV64f_IV64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV8sS8s_IV8s(System.SByte[],System.Int32,System.SByte,System.Int32)">
            <summary>Computes pairwise maxima of signed 8-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV8uS8u_IV8u(System.Byte[],System.Int32,System.Byte,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 8-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV16sS16s_IV16s(System.Int16[],System.Int32,System.Int16,System.Int32)">
            <summary>Computes pairwise maxima of signed 16-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV16uS16u_IV16u(System.UInt16[],System.Int32,System.UInt16,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 16-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV32sS32s_IV32s(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of signed 32-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV32uS32u_IV32u(System.UInt32[],System.Int32,System.UInt32,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 32-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV64sS32s_IV64s(System.Int64[],System.Int32,System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of signed 64-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV64uS32u_IV64u(System.UInt64[],System.Int32,System.UInt32,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 64-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV32fS32f_IV32f(System.Single[],System.Int32,System.Single,System.Int32)">
            <summary>Computes pairwise maxima of single precision (32-bit) floating-point array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV64fS64f_IV64f(System.Double[],System.Int32,System.Double,System.Int32)">
            <summary>Computes pairwise maxima of double precision (64-bit) floating-point array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V8s_S8s(System.SByte*,System.Int32)">
            <summary>Computes the maximum of signed 8-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose maximum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V8u_S8u(System.Byte*,System.Int32)">
            <summary>Computes the maximum of unsigned 8-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose maximum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V16s_S16s(System.Int16*,System.Int32)">
            <summary>Computes the maximum of signed 16-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose maximum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V16u_S16u(System.UInt16*,System.Int32)">
            <summary>Computes the maximum of unsigned 16-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose maximum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32s_S32s(System.Int32*,System.Int32)">
            <summary>Computes the maximum of signed 32-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose maximum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32u_S32u(System.UInt32*,System.Int32)">
            <summary>Computes the maximum of unsigned 32-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose maximum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64s_S64s(System.Int64*,System.Int32)">
            <summary>Computes the maximum of signed 64-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose maximum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64u_S64u(System.UInt64*,System.Int32)">
            <summary>Computes the maximum of unsigned 64-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose maximum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32f_S32f(System.Single*,System.Int32)">
            <summary>Computes the maximum of single precision (32-bit) floating-point array elements.</summary>
            <param name="v">Pointer to the array of elements whose maximum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64f_S64f(System.Double*,System.Int32)">
            <summary>Computes the maximum of double precision (64-bit) floating-point array elements.</summary>
            <param name="v">Pointer to the array of elements whose maximum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V8sV8s_V8s(System.SByte*,System.SByte*,System.SByte*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 8-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of signed 8-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 8-bit integer elements.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or maximum is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V8uV8u_V8u(System.Byte*,System.Byte*,System.Byte*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 8-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of unsigned 8-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 8-bit integer elements.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or maximum is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V16sV16s_V16s(System.Int16*,System.Int16*,System.Int16*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 16-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of signed 16-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 16-bit integer elements.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V16uV16u_V16u(System.UInt16*,System.UInt16*,System.UInt16*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 16-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of unsigned 16-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 16-bit integer elements.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32sV32s_V32s(System.Int32*,System.Int32*,System.Int32*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 32-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of signed 32-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 32-bit integer elements.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32uV32u_V32u(System.UInt32*,System.UInt32*,System.UInt32*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 32-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of unsigned 32-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 32-bit integer elements.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64sV32s_V64s(System.Int64*,System.Int32*,System.Int64*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 64-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of signed 64-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 32-bit integer elements.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64uV32u_V64u(System.UInt64*,System.UInt32*,System.UInt64*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 64-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of unsigned 64-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 32-bit integer elements.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32fV32f_V32f(System.Single*,System.Single*,System.Single*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two single precision (32-bit) floating-point arrays.</summary>
            <param name="x">Pointer to the first array of single precision (32-bit) floating-point elements.</param>
            <param name="y">Pointer to the second array of single precision (32-bit) floating-point elements.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64fV64f_V64f(System.Double*,System.Double*,System.Double*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two double precision (64-bit) floating-point arrays.</summary>
            <param name="x">Pointer to the first array of double precision (64-bit) floating-point elements.</param>
            <param name="y">Pointer to the second array of double precision (64-bit) floating-point elements.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V8sS8s_V8s(System.SByte*,System.SByte,System.SByte*,System.Int32)">
            <summary>Computes pairwise maxima of signed 8-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of signed 8-bit integer elements.</param>
            <param name="y">The signed 8-bit integer constant.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x or maximum is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V8uS8u_V8u(System.Byte*,System.Byte,System.Byte*,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 8-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of unsigned 8-bit integer elements.</param>
            <param name="y">The unsigned 8-bit integer constant.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x or maximum is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V16sS16s_V16s(System.Int16*,System.Int16,System.Int16*,System.Int32)">
            <summary>Computes pairwise maxima of signed 16-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of signed 16-bit integer elements.</param>
            <param name="y">The signed 16-bit integer constant.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V16uS16u_V16u(System.UInt16*,System.UInt16,System.UInt16*,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 16-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of unsigned 16-bit integer elements.</param>
            <param name="y">The unsigned 16-bit integer constant.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32sS32s_V32s(System.Int32*,System.Int32,System.Int32*,System.Int32)">
            <summary>Computes pairwise maxima of signed 32-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of signed 32-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32uS32u_V32u(System.UInt32*,System.UInt32,System.UInt32*,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 32-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of unsigned 32-bit integer elements.</param>
            <param name="y">The unsigned 32-bit integer constant.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64sS32s_V64s(System.Int64*,System.Int32,System.Int64*,System.Int32)">
            <summary>Computes pairwise maxima of signed 64-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of signed 64-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64uS32u_V64u(System.UInt64*,System.UInt32,System.UInt64*,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 64-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of unsigned 64-bit integer elements.</param>
            <param name="y">The unsigned 32-bit integer constant.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V32fS32f_V32f(System.Single*,System.Single,System.Single*,System.Int32)">
            <summary>Computes pairwise maxima of single precision (32-bit) floating-point array elements and a constant.</summary>
            <param name="x">Pointer to the first array of single precision (32-bit) floating-point elements.</param>
            <param name="y">The single precision (32-bit) floating-point constant.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_V64fS64f_V64f(System.Double*,System.Double,System.Double*,System.Int32)">
            <summary>Computes pairwise maxima of double precision (64-bit) floating-point array elements and a constant.</summary>
            <param name="x">Pointer to the first array of double precision (64-bit) floating-point elements.</param>
            <param name="y">The double precision (64-bit) floating-point constant.</param>
            <param name="maximum">Pointer to the array of pairwise maximum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and maximum.</param>
            <exception cref="T:System.NullReferenceException">If x or maximum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or maximum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV8sV8s_IV8s(System.SByte*,System.SByte*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of signed 8-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 8-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV8uV8u_IV8u(System.Byte*,System.Byte*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 8-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of unsigned 8-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 8-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV16sV16s_IV16s(System.Int16*,System.Int16*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of signed 16-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV16uV16u_IV16u(System.UInt16*,System.UInt16*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 16-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of unsigned 16-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV32sV32s_IV32s(System.Int32*,System.Int32*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of signed 32-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV32uV32u_IV32u(System.UInt32*,System.UInt32*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 32-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of unsigned 32-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV64sV32s_IV64s(System.Int64*,System.Int32*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of signed 64-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV64uV32u_IV64u(System.UInt64*,System.UInt32*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two unsigned 64-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of unsigned 64-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV32fV32f_IV32f(System.Single*,System.Single*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of single precision (32-bit) floating-point elements.</param>
            <param name="y">Pointer to the second array of single precision (32-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV64fV64f_IV64f(System.Double*,System.Double*,System.Int32)">
            <summary>Computes pairwise maxima of corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of double precision (64-bit) floating-point elements.</param>
            <param name="y">Pointer to the second array of double precision (64-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV8sS8s_IV8s(System.SByte*,System.SByte,System.Int32)">
            <summary>Computes pairwise maxima of signed 8-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of signed 8-bit integer elements.</param>
            <param name="y">The signed 8-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV8uS8u_IV8u(System.Byte*,System.Byte,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 8-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of unsigned 8-bit integer elements.</param>
            <param name="y">The unsigned 8-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV16sS16s_IV16s(System.Int16*,System.Int16,System.Int32)">
            <summary>Computes pairwise maxima of signed 16-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of signed 16-bit integer elements.</param>
            <param name="y">The signed 16-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV16uS16u_IV16u(System.UInt16*,System.UInt16,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 16-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of unsigned 16-bit integer elements.</param>
            <param name="y">The unsigned 16-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV32sS32s_IV32s(System.Int32*,System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of signed 32-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of signed 32-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV32uS32u_IV32u(System.UInt32*,System.UInt32,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 32-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of unsigned 32-bit integer elements.</param>
            <param name="y">The unsigned 32-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV64sS32s_IV64s(System.Int64*,System.Int32,System.Int32)">
            <summary>Computes pairwise maxima of signed 64-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of signed 64-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV64uS32u_IV64u(System.UInt64*,System.UInt32,System.Int32)">
            <summary>Computes pairwise maxima of unsigned 64-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of unsigned 64-bit integer elements.</param>
            <param name="y">The unsigned 32-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV32fS32f_IV32f(System.Single*,System.Single,System.Int32)">
            <summary>Computes pairwise maxima of single precision (32-bit) floating-point array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of single precision (32-bit) floating-point elements.</param>
            <param name="y">The single precision (32-bit) floating-point constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Max_IV64fS64f_IV64f(System.Double*,System.Double,System.Int32)">
            <summary>Computes pairwise maxima of double precision (64-bit) floating-point array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of double precision (64-bit) floating-point elements.</param>
            <param name="y">The double precision (64-bit) floating-point constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V8s_S8s(System.SByte[],System.Int32,System.Int32)">
            <summary>Computes the minimum of signed 8-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V8u_S8u(System.Byte[],System.Int32,System.Int32)">
            <summary>Computes the minimum of unsigned 8-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V16s_S16s(System.Int16[],System.Int32,System.Int32)">
            <summary>Computes the minimum of signed 16-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V16u_S16u(System.UInt16[],System.Int32,System.Int32)">
            <summary>Computes the minimum of unsigned 16-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32s_S32s(System.Int32[],System.Int32,System.Int32)">
            <summary>Computes the minimum of signed 32-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32u_S32u(System.UInt32[],System.Int32,System.Int32)">
            <summary>Computes the minimum of unsigned 32-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64s_S64s(System.Int64[],System.Int32,System.Int32)">
            <summary>Computes the minimum of signed 64-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64u_S64u(System.UInt64[],System.Int32,System.Int32)">
            <summary>Computes the minimum of unsigned 64-bit integer array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32f_S32f(System.Single[],System.Int32,System.Int32)">
            <summary>Computes the minimum of single precision (32-bit) floating-point array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64f_S64f(System.Double[],System.Int32,System.Int32)">
            <summary>Computes the minimum of double precision (64-bit) floating-point array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V8sV8s_V8s(System.SByte[],System.Int32,System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 8-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or minimumArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V8uV8u_V8u(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 8-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or minimumArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V16sV16s_V16s(System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 16-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V16uV16u_V16u(System.UInt16[],System.Int32,System.UInt16[],System.Int32,System.UInt16[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 16-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32sV32s_V32s(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 32-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32uV32u_V32u(System.UInt32[],System.Int32,System.UInt32[],System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 32-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64sV32s_V64s(System.Int64[],System.Int32,System.Int32[],System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 64-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64uV32u_V64u(System.UInt64[],System.Int32,System.UInt32[],System.Int32,System.UInt64[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 64-bit integer arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32fV32f_V32f(System.Single[],System.Int32,System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two single precision (32-bit) floating-point arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64fV64f_V64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two double precision (64-bit) floating-point arrays.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V8sS8s_V8s(System.SByte[],System.Int32,System.SByte,System.SByte[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of signed 8-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or minimumArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V8uS8u_V8u(System.Byte[],System.Int32,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of unsigned 8-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or minimumArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V16sS16s_V16s(System.Int16[],System.Int32,System.Int16,System.Int16[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of signed 16-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V16uS16u_V16u(System.UInt16[],System.Int32,System.UInt16,System.UInt16[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of unsigned 16-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32sS32s_V32s(System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of signed 32-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32uS32u_V32u(System.UInt32[],System.Int32,System.UInt32,System.UInt32[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of unsigned 32-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64sS32s_V64s(System.Int64[],System.Int32,System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of signed 64-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64uS32u_V64u(System.UInt64[],System.Int32,System.UInt32,System.UInt64[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of unsigned 64-bit integer array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32fS32f_V32f(System.Single[],System.Int32,System.Single,System.Single[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of single precision (32-bit) floating-point array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64fS64f_V64f(System.Double[],System.Int32,System.Double,System.Double[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of double precision (64-bit) floating-point array elements and a constant.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or minimumArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or minimumArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, minimumOffset is negative, minimumOffset + length exceeds the length of minimumArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV8sV8s_IV8s(System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV8uV8u_IV8u(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 8-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV16sV16s_IV16s(System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV16uV16u_IV16u(System.UInt16[],System.Int32,System.UInt16[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 16-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV32sV32s_IV32s(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV32uV32u_IV32u(System.UInt32[],System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 32-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV64sV32s_IV64s(System.Int64[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV64uV32u_IV64u(System.UInt64[],System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 64-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV32fV32f_IV32f(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV64fV64f_IV64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV8sS8s_IV8s(System.SByte[],System.Int32,System.SByte,System.Int32)">
            <summary>Computes pairwise minima of signed 8-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV8uS8u_IV8u(System.Byte[],System.Int32,System.Byte,System.Int32)">
            <summary>Computes pairwise minima of unsigned 8-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV16sS16s_IV16s(System.Int16[],System.Int32,System.Int16,System.Int32)">
            <summary>Computes pairwise minima of signed 16-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV16uS16u_IV16u(System.UInt16[],System.Int32,System.UInt16,System.Int32)">
            <summary>Computes pairwise minima of unsigned 16-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV32sS32s_IV32s(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>Computes pairwise minima of signed 32-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV32uS32u_IV32u(System.UInt32[],System.Int32,System.UInt32,System.Int32)">
            <summary>Computes pairwise minima of unsigned 32-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV64sS32s_IV64s(System.Int64[],System.Int32,System.Int32,System.Int32)">
            <summary>Computes pairwise minima of signed 64-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV64uS32u_IV64u(System.UInt64[],System.Int32,System.UInt32,System.Int32)">
            <summary>Computes pairwise minima of unsigned 64-bit integer array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV32fS32f_IV32f(System.Single[],System.Int32,System.Single,System.Int32)">
            <summary>Computes pairwise minima of single precision (32-bit) floating-point array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV64fS64f_IV64f(System.Double[],System.Int32,System.Double,System.Int32)">
            <summary>Computes pairwise minima of double precision (64-bit) floating-point array elements and a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V8s_S8s(System.SByte*,System.Int32)">
            <summary>Computes the minimum of signed 8-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose minimum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V8u_S8u(System.Byte*,System.Int32)">
            <summary>Computes the minimum of unsigned 8-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose minimum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V16s_S16s(System.Int16*,System.Int32)">
            <summary>Computes the minimum of signed 16-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose minimum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V16u_S16u(System.UInt16*,System.Int32)">
            <summary>Computes the minimum of unsigned 16-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose minimum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32s_S32s(System.Int32*,System.Int32)">
            <summary>Computes the minimum of signed 32-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose minimum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32u_S32u(System.UInt32*,System.Int32)">
            <summary>Computes the minimum of unsigned 32-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose minimum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64s_S64s(System.Int64*,System.Int32)">
            <summary>Computes the minimum of signed 64-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose minimum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64u_S64u(System.UInt64*,System.Int32)">
            <summary>Computes the minimum of unsigned 64-bit integer array elements.</summary>
            <param name="v">Pointer to the array of elements whose minimum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32f_S32f(System.Single*,System.Int32)">
            <summary>Computes the minimum of single precision (32-bit) floating-point array elements.</summary>
            <param name="v">Pointer to the array of elements whose minimum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64f_S64f(System.Double*,System.Int32)">
            <summary>Computes the minimum of double precision (64-bit) floating-point array elements.</summary>
            <param name="v">Pointer to the array of elements whose minimum will be computed.</param>
            <param name="length">Length of the array specified by v. Must be non-zero.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative or length is zero.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V8sV8s_V8s(System.SByte*,System.SByte*,System.SByte*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 8-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of signed 8-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 8-bit integer elements.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or minimum is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V8uV8u_V8u(System.Byte*,System.Byte*,System.Byte*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 8-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of unsigned 8-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 8-bit integer elements.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or minimum is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V16sV16s_V16s(System.Int16*,System.Int16*,System.Int16*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 16-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of signed 16-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 16-bit integer elements.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V16uV16u_V16u(System.UInt16*,System.UInt16*,System.UInt16*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 16-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of unsigned 16-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 16-bit integer elements.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32sV32s_V32s(System.Int32*,System.Int32*,System.Int32*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 32-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of signed 32-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 32-bit integer elements.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32uV32u_V32u(System.UInt32*,System.UInt32*,System.UInt32*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 32-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of unsigned 32-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 32-bit integer elements.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64sV32s_V64s(System.Int64*,System.Int32*,System.Int64*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 64-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of signed 64-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 32-bit integer elements.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64uV32u_V64u(System.UInt64*,System.UInt32*,System.UInt64*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 64-bit integer arrays.</summary>
            <param name="x">Pointer to the first array of unsigned 64-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 32-bit integer elements.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32fV32f_V32f(System.Single*,System.Single*,System.Single*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two single precision (32-bit) floating-point arrays.</summary>
            <param name="x">Pointer to the first array of single precision (32-bit) floating-point elements.</param>
            <param name="y">Pointer to the second array of single precision (32-bit) floating-point elements.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64fV64f_V64f(System.Double*,System.Double*,System.Double*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two double precision (64-bit) floating-point arrays.</summary>
            <param name="x">Pointer to the first array of double precision (64-bit) floating-point elements.</param>
            <param name="y">Pointer to the second array of double precision (64-bit) floating-point elements.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x, y or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V8sS8s_V8s(System.SByte*,System.SByte,System.SByte*,System.Int32)">
            <summary>Computes pairwise minima of signed 8-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of signed 8-bit integer elements.</param>
            <param name="y">The signed 8-bit integer constant.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x or minimum is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V8uS8u_V8u(System.Byte*,System.Byte,System.Byte*,System.Int32)">
            <summary>Computes pairwise minima of unsigned 8-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of unsigned 8-bit integer elements.</param>
            <param name="y">The unsigned 8-bit integer constant.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x or minimum is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V16sS16s_V16s(System.Int16*,System.Int16,System.Int16*,System.Int32)">
            <summary>Computes pairwise minima of signed 16-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of signed 16-bit integer elements.</param>
            <param name="y">The signed 16-bit integer constant.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V16uS16u_V16u(System.UInt16*,System.UInt16,System.UInt16*,System.Int32)">
            <summary>Computes pairwise minima of unsigned 16-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of unsigned 16-bit integer elements.</param>
            <param name="y">The unsigned 16-bit integer constant.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32sS32s_V32s(System.Int32*,System.Int32,System.Int32*,System.Int32)">
            <summary>Computes pairwise minima of signed 32-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of signed 32-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32uS32u_V32u(System.UInt32*,System.UInt32,System.UInt32*,System.Int32)">
            <summary>Computes pairwise minima of unsigned 32-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of unsigned 32-bit integer elements.</param>
            <param name="y">The unsigned 32-bit integer constant.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64sS32s_V64s(System.Int64*,System.Int32,System.Int64*,System.Int32)">
            <summary>Computes pairwise minima of signed 64-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of signed 64-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64uS32u_V64u(System.UInt64*,System.UInt32,System.UInt64*,System.Int32)">
            <summary>Computes pairwise minima of unsigned 64-bit integer array elements and a constant.</summary>
            <param name="x">Pointer to the first array of unsigned 64-bit integer elements.</param>
            <param name="y">The unsigned 32-bit integer constant.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V32fS32f_V32f(System.Single*,System.Single,System.Single*,System.Int32)">
            <summary>Computes pairwise minima of single precision (32-bit) floating-point array elements and a constant.</summary>
            <param name="x">Pointer to the first array of single precision (32-bit) floating-point elements.</param>
            <param name="y">The single precision (32-bit) floating-point constant.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_V64fS64f_V64f(System.Double*,System.Double,System.Double*,System.Int32)">
            <summary>Computes pairwise minima of double precision (64-bit) floating-point array elements and a constant.</summary>
            <param name="x">Pointer to the first array of double precision (64-bit) floating-point elements.</param>
            <param name="y">The double precision (64-bit) floating-point constant.</param>
            <param name="minimum">Pointer to the array of pairwise minimum elements.</param>
            <param name="length">Length of the arrays specified by x, y, and minimum.</param>
            <exception cref="T:System.NullReferenceException">If x or minimum is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or minimum is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV8sV8s_IV8s(System.SByte*,System.SByte*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of signed 8-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 8-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV8uV8u_IV8u(System.Byte*,System.Byte*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 8-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of unsigned 8-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 8-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV16sV16s_IV16s(System.Int16*,System.Int16*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of signed 16-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV16uV16u_IV16u(System.UInt16*,System.UInt16*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 16-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of unsigned 16-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV32sV32s_IV32s(System.Int32*,System.Int32*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of signed 32-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV32uV32u_IV32u(System.UInt32*,System.UInt32*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 32-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of unsigned 32-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV64sV32s_IV64s(System.Int64*,System.Int32*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of signed 64-bit integer elements.</param>
            <param name="y">Pointer to the second array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV64uV32u_IV64u(System.UInt64*,System.UInt32*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two unsigned 64-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of unsigned 64-bit integer elements.</param>
            <param name="y">Pointer to the second array of unsigned 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV32fV32f_IV32f(System.Single*,System.Single*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of single precision (32-bit) floating-point elements.</param>
            <param name="y">Pointer to the second array of single precision (32-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV64fV64f_IV64f(System.Double*,System.Double*,System.Int32)">
            <summary>Computes pairwise minima of corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first array of double precision (64-bit) floating-point elements.</param>
            <param name="y">Pointer to the second array of double precision (64-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV8sS8s_IV8s(System.SByte*,System.SByte,System.Int32)">
            <summary>Computes pairwise minima of signed 8-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of signed 8-bit integer elements.</param>
            <param name="y">The signed 8-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV8uS8u_IV8u(System.Byte*,System.Byte,System.Int32)">
            <summary>Computes pairwise minima of unsigned 8-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of unsigned 8-bit integer elements.</param>
            <param name="y">The unsigned 8-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV16sS16s_IV16s(System.Int16*,System.Int16,System.Int32)">
            <summary>Computes pairwise minima of signed 16-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of signed 16-bit integer elements.</param>
            <param name="y">The signed 16-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV16uS16u_IV16u(System.UInt16*,System.UInt16,System.Int32)">
            <summary>Computes pairwise minima of unsigned 16-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of unsigned 16-bit integer elements.</param>
            <param name="y">The unsigned 16-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV32sS32s_IV32s(System.Int32*,System.Int32,System.Int32)">
            <summary>Computes pairwise minima of signed 32-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of signed 32-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV32uS32u_IV32u(System.UInt32*,System.UInt32,System.Int32)">
            <summary>Computes pairwise minima of unsigned 32-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of unsigned 32-bit integer elements.</param>
            <param name="y">The unsigned 32-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV64sS32s_IV64s(System.Int64*,System.Int32,System.Int32)">
            <summary>Computes pairwise minima of signed 64-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of signed 64-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV64uS32u_IV64u(System.UInt64*,System.UInt32,System.Int32)">
            <summary>Computes pairwise minima of unsigned 64-bit integer array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of unsigned 64-bit integer elements.</param>
            <param name="y">The unsigned 32-bit integer constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV32fS32f_IV32f(System.Single*,System.Single,System.Int32)">
            <summary>Computes pairwise minima of single precision (32-bit) floating-point array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of single precision (32-bit) floating-point elements.</param>
            <param name="y">The single precision (32-bit) floating-point constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Min_IV64fS64f_IV64f(System.Double*,System.Double,System.Int32)">
            <summary>Computes pairwise minima of double precision (64-bit) floating-point array elements and a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the array of double precision (64-bit) floating-point elements.</param>
            <param name="y">The double precision (64-bit) floating-point constant.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V8sV8s_V8s(System.SByte[],System.Int32,System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int32)">
            <summary>Multiples corresponding elements in two signed 8-bit integer arrays, producing an array of signed 8-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or productArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V8sV8s_V16s(System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Multiples corresponding elements in two signed 8-bit integer arrays, producing an array of signed 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V8uV8u_V16u(System.Byte[],System.Int32,System.Byte[],System.Int32,System.UInt16[],System.Int32,System.Int32)">
            <summary>Multiples corresponding elements in two unsigned 8-bit integer arrays, producing an array of unsigned 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V16sV16s_V16s(System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Multiples corresponding elements in two signed 16-bit integer arrays, producing an array of signed 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V16sV16s_V32s(System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Multiples corresponding elements in two signed 16-bit integer arrays, producing an array of signed 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V16uV16u_V32u(System.UInt16[],System.Int32,System.UInt16[],System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>Multiples corresponding elements in two unsigned 16-bit integer arrays, producing an array of unsigned 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32sV32s_V32s(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Multiples corresponding elements in two signed 32-bit integer arrays, producing an array of signed 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32sV32s_V64s(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Multiples corresponding elements in two signed 32-bit integer arrays, producing an array of signed 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32uV32u_V64u(System.UInt32[],System.Int32,System.UInt32[],System.Int32,System.UInt64[],System.Int32,System.Int32)">
            <summary>Multiples corresponding elements in two unsigned 32-bit integer arrays, producing an array of unsigned 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V64sV64s_V64s(System.Int64[],System.Int32,System.Int64[],System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Multiples corresponding elements in two signed 64-bit integer arrays, producing an array of signed 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32fV32f_V32f(System.Single[],System.Int32,System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>Multiples corresponding elements in two single precision (32-bit) floating-point arrays, producing an array of single precision (32-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V64fV64f_V64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Multiples corresponding elements in two double precision (64-bit) floating-point arrays, producing an array of double precision (64-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V8sS8s_V8s(System.SByte[],System.Int32,System.SByte,System.SByte[],System.Int32,System.Int32)">
            <summary>Multiplies signed 8-bit integer array elements by a constant. Produces an array of signed 8-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or productArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V8sS8s_V16s(System.SByte[],System.Int32,System.SByte,System.Int16[],System.Int32,System.Int32)">
            <summary>Multiplies signed 8-bit integer array elements by a constant. Produces an array of signed 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V8uS8u_V16u(System.Byte[],System.Int32,System.Byte,System.UInt16[],System.Int32,System.Int32)">
            <summary>Multiplies unsigned 8-bit integer array elements by a constant. Produces an array of unsigned 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V16sS16s_V16s(System.Int16[],System.Int32,System.Int16,System.Int16[],System.Int32,System.Int32)">
            <summary>Multiplies signed 16-bit integer array elements by a constant. Produces an array of signed 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V16sS16s_V32s(System.Int16[],System.Int32,System.Int16,System.Int32[],System.Int32,System.Int32)">
            <summary>Multiplies signed 16-bit integer array elements by a constant. Produces an array of signed 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V16uS16u_V32u(System.UInt16[],System.Int32,System.UInt16,System.UInt32[],System.Int32,System.Int32)">
            <summary>Multiplies unsigned 16-bit integer array elements by a constant. Produces an array of unsigned 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32sS32s_V32s(System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Multiplies signed 32-bit integer array elements by a constant. Produces an array of signed 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32sS32s_V64s(System.Int32[],System.Int32,System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Multiplies signed 32-bit integer array elements by a constant. Produces an array of signed 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32uS32u_V64u(System.UInt32[],System.Int32,System.UInt32,System.UInt64[],System.Int32,System.Int32)">
            <summary>Multiplies unsigned 32-bit integer array elements by a constant. Produces an array of unsigned 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V64sS64s_V64s(System.Int64[],System.Int32,System.Int64,System.Int64[],System.Int32,System.Int32)">
            <summary>Multiplies signed 64-bit integer array elements by a constant. Produces an array of signed 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32fS32f_V32f(System.Single[],System.Int32,System.Single,System.Single[],System.Int32,System.Int32)">
            <summary>Multiplies single precision (32-bit) floating-point array elements by a constant. Produces an array of single precision (32-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V64fS64f_V64f(System.Double[],System.Int32,System.Double,System.Double[],System.Int32,System.Int32)">
            <summary>Multiplies double precision (64-bit) floating-point array elements by a constant. Produces an array of double precision (64-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or productArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or productArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, productOffset is negative, productOffset + length exceeds the length of productArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV8sV8s_IV8s(System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int32)">
            <summary>Multiplies corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV16sV16s_IV16s(System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Multiplies corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV32sV32s_IV32s(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Multiplies corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV64sV64s_IV64s(System.Int64[],System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Multiplies corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV32fV32f_IV32f(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>Multiplies corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV64fV64f_IV64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Multiplies corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV8sS8s_IV8s(System.SByte[],System.Int32,System.SByte,System.Int32)">
            <summary>Multiplies signed 8-bit integer array elements by a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV16sS16s_IV16s(System.Int16[],System.Int32,System.Int16,System.Int32)">
            <summary>Multiplies signed 16-bit integer array elements by a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV32sS32s_IV32s(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>Multiplies signed 32-bit integer array elements by a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV64sS64s_IV64s(System.Int64[],System.Int32,System.Int64,System.Int32)">
            <summary>Multiplies signed 64-bit integer array elements by a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV32fS32f_IV32f(System.Single[],System.Int32,System.Single,System.Int32)">
            <summary>Multiplies single precision (32-bit) floating-point array elements by a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV64fS64f_IV64f(System.Double[],System.Int32,System.Double,System.Int32)">
            <summary>Multiplies double precision (64-bit) floating-point array elements by a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V8sV8s_V8s(System.SByte*,System.SByte*,System.SByte*,System.Int32)">
            <summary>Multiples corresponding elements in two signed 8-bit integer arrays, producing an array of signed 8-bit integer elements.</summary>
            <param name="x">Pointer to the first factor array of signed 8-bit integer elements.</param>
            <param name="y">Pointer to the second factor array of signed 8-bit integer elements.</param>
            <param name="product">Pointer to the product array of signed 8-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and product.</param>
            <exception cref="T:System.NullReferenceException">If x, y or product is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V8sV8s_V16s(System.SByte*,System.SByte*,System.Int16*,System.Int32)">
            <summary>Multiples corresponding elements in two signed 8-bit integer arrays, producing an array of signed 16-bit integer elements.</summary>
            <param name="x">Pointer to the first factor array of signed 8-bit integer elements.</param>
            <param name="y">Pointer to the second factor array of signed 8-bit integer elements.</param>
            <param name="product">Pointer to the product array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and product.</param>
            <exception cref="T:System.NullReferenceException">If x, y or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V8uV8u_V16u(System.Byte*,System.Byte*,System.UInt16*,System.Int32)">
            <summary>Multiples corresponding elements in two unsigned 8-bit integer arrays, producing an array of unsigned 16-bit integer elements.</summary>
            <param name="x">Pointer to the first factor array of unsigned 8-bit integer elements.</param>
            <param name="y">Pointer to the second factor array of unsigned 8-bit integer elements.</param>
            <param name="product">Pointer to the product array of unsigned 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and product.</param>
            <exception cref="T:System.NullReferenceException">If x, y or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V16sV16s_V16s(System.Int16*,System.Int16*,System.Int16*,System.Int32)">
            <summary>Multiples corresponding elements in two signed 16-bit integer arrays, producing an array of signed 16-bit integer elements.</summary>
            <param name="x">Pointer to the first factor array of signed 16-bit integer elements.</param>
            <param name="y">Pointer to the second factor array of signed 16-bit integer elements.</param>
            <param name="product">Pointer to the product array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and product.</param>
            <exception cref="T:System.NullReferenceException">If x, y or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V16sV16s_V32s(System.Int16*,System.Int16*,System.Int32*,System.Int32)">
            <summary>Multiples corresponding elements in two signed 16-bit integer arrays, producing an array of signed 32-bit integer elements.</summary>
            <param name="x">Pointer to the first factor array of signed 16-bit integer elements.</param>
            <param name="y">Pointer to the second factor array of signed 16-bit integer elements.</param>
            <param name="product">Pointer to the product array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and product.</param>
            <exception cref="T:System.NullReferenceException">If x, y or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V16uV16u_V32u(System.UInt16*,System.UInt16*,System.UInt32*,System.Int32)">
            <summary>Multiples corresponding elements in two unsigned 16-bit integer arrays, producing an array of unsigned 32-bit integer elements.</summary>
            <param name="x">Pointer to the first factor array of unsigned 16-bit integer elements.</param>
            <param name="y">Pointer to the second factor array of unsigned 16-bit integer elements.</param>
            <param name="product">Pointer to the product array of unsigned 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and product.</param>
            <exception cref="T:System.NullReferenceException">If x, y or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32sV32s_V32s(System.Int32*,System.Int32*,System.Int32*,System.Int32)">
            <summary>Multiples corresponding elements in two signed 32-bit integer arrays, producing an array of signed 32-bit integer elements.</summary>
            <param name="x">Pointer to the first factor array of signed 32-bit integer elements.</param>
            <param name="y">Pointer to the second factor array of signed 32-bit integer elements.</param>
            <param name="product">Pointer to the product array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and product.</param>
            <exception cref="T:System.NullReferenceException">If x, y or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32sV32s_V64s(System.Int32*,System.Int32*,System.Int64*,System.Int32)">
            <summary>Multiples corresponding elements in two signed 32-bit integer arrays, producing an array of signed 64-bit integer elements.</summary>
            <param name="x">Pointer to the first factor array of signed 32-bit integer elements.</param>
            <param name="y">Pointer to the second factor array of signed 32-bit integer elements.</param>
            <param name="product">Pointer to the product array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and product.</param>
            <exception cref="T:System.NullReferenceException">If x, y or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32uV32u_V64u(System.UInt32*,System.UInt32*,System.UInt64*,System.Int32)">
            <summary>Multiples corresponding elements in two unsigned 32-bit integer arrays, producing an array of unsigned 64-bit integer elements.</summary>
            <param name="x">Pointer to the first factor array of unsigned 32-bit integer elements.</param>
            <param name="y">Pointer to the second factor array of unsigned 32-bit integer elements.</param>
            <param name="product">Pointer to the product array of unsigned 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and product.</param>
            <exception cref="T:System.NullReferenceException">If x, y or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V64sV64s_V64s(System.Int64*,System.Int64*,System.Int64*,System.Int32)">
            <summary>Multiples corresponding elements in two signed 64-bit integer arrays, producing an array of signed 64-bit integer elements.</summary>
            <param name="x">Pointer to the first factor array of signed 64-bit integer elements.</param>
            <param name="y">Pointer to the second factor array of signed 64-bit integer elements.</param>
            <param name="product">Pointer to the product array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and product.</param>
            <exception cref="T:System.NullReferenceException">If x, y or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32fV32f_V32f(System.Single*,System.Single*,System.Single*,System.Int32)">
            <summary>Multiples corresponding elements in two single precision (32-bit) floating-point arrays, producing an array of single precision (32-bit) floating-point elements.</summary>
            <param name="x">Pointer to the first factor array of single precision (32-bit) floating-point elements.</param>
            <param name="y">Pointer to the second factor array of single precision (32-bit) floating-point elements.</param>
            <param name="product">Pointer to the product array of single precision (32-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x, y, and product.</param>
            <exception cref="T:System.NullReferenceException">If x, y or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V64fV64f_V64f(System.Double*,System.Double*,System.Double*,System.Int32)">
            <summary>Multiples corresponding elements in two double precision (64-bit) floating-point arrays, producing an array of double precision (64-bit) floating-point elements.</summary>
            <param name="x">Pointer to the first factor array of double precision (64-bit) floating-point elements.</param>
            <param name="y">Pointer to the second factor array of double precision (64-bit) floating-point elements.</param>
            <param name="product">Pointer to the product array of double precision (64-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x, y, and product.</param>
            <exception cref="T:System.NullReferenceException">If x, y or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V8sS8s_V8s(System.SByte*,System.SByte,System.SByte*,System.Int32)">
            <summary>Multiplies signed 8-bit integer array elements by a constant. Produces an array of signed 8-bit integer elements.</summary>
            <param name="x">Pointer to the factor array of signed 8-bit integer elements.</param>
            <param name="y">The signed 8-bit integer constant to be multiplied by.</param>
            <param name="product">Pointer to the product array of signed 8-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and product.</param>
            <exception cref="T:System.NullReferenceException">If x or product is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V8sS8s_V16s(System.SByte*,System.SByte,System.Int16*,System.Int32)">
            <summary>Multiplies signed 8-bit integer array elements by a constant. Produces an array of signed 16-bit integer elements.</summary>
            <param name="x">Pointer to the factor array of signed 8-bit integer elements.</param>
            <param name="y">The signed 8-bit integer constant to be multiplied by.</param>
            <param name="product">Pointer to the product array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and product.</param>
            <exception cref="T:System.NullReferenceException">If x or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V8uS8u_V16u(System.Byte*,System.Byte,System.UInt16*,System.Int32)">
            <summary>Multiplies unsigned 8-bit integer array elements by a constant. Produces an array of unsigned 16-bit integer elements.</summary>
            <param name="x">Pointer to the factor array of unsigned 8-bit integer elements.</param>
            <param name="y">The unsigned 8-bit integer constant to be multiplied by.</param>
            <param name="product">Pointer to the product array of unsigned 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and product.</param>
            <exception cref="T:System.NullReferenceException">If x or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V16sS16s_V16s(System.Int16*,System.Int16,System.Int16*,System.Int32)">
            <summary>Multiplies signed 16-bit integer array elements by a constant. Produces an array of signed 16-bit integer elements.</summary>
            <param name="x">Pointer to the factor array of signed 16-bit integer elements.</param>
            <param name="y">The signed 16-bit integer constant to be multiplied by.</param>
            <param name="product">Pointer to the product array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and product.</param>
            <exception cref="T:System.NullReferenceException">If x or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V16sS16s_V32s(System.Int16*,System.Int16,System.Int32*,System.Int32)">
            <summary>Multiplies signed 16-bit integer array elements by a constant. Produces an array of signed 32-bit integer elements.</summary>
            <param name="x">Pointer to the factor array of signed 16-bit integer elements.</param>
            <param name="y">The signed 16-bit integer constant to be multiplied by.</param>
            <param name="product">Pointer to the product array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and product.</param>
            <exception cref="T:System.NullReferenceException">If x or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V16uS16u_V32u(System.UInt16*,System.UInt16,System.UInt32*,System.Int32)">
            <summary>Multiplies unsigned 16-bit integer array elements by a constant. Produces an array of unsigned 32-bit integer elements.</summary>
            <param name="x">Pointer to the factor array of unsigned 16-bit integer elements.</param>
            <param name="y">The unsigned 16-bit integer constant to be multiplied by.</param>
            <param name="product">Pointer to the product array of unsigned 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and product.</param>
            <exception cref="T:System.NullReferenceException">If x or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32sS32s_V32s(System.Int32*,System.Int32,System.Int32*,System.Int32)">
            <summary>Multiplies signed 32-bit integer array elements by a constant. Produces an array of signed 32-bit integer elements.</summary>
            <param name="x">Pointer to the factor array of signed 32-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant to be multiplied by.</param>
            <param name="product">Pointer to the product array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and product.</param>
            <exception cref="T:System.NullReferenceException">If x or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32sS32s_V64s(System.Int32*,System.Int32,System.Int64*,System.Int32)">
            <summary>Multiplies signed 32-bit integer array elements by a constant. Produces an array of signed 64-bit integer elements.</summary>
            <param name="x">Pointer to the factor array of signed 32-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant to be multiplied by.</param>
            <param name="product">Pointer to the product array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and product.</param>
            <exception cref="T:System.NullReferenceException">If x or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32uS32u_V64u(System.UInt32*,System.UInt32,System.UInt64*,System.Int32)">
            <summary>Multiplies unsigned 32-bit integer array elements by a constant. Produces an array of unsigned 64-bit integer elements.</summary>
            <param name="x">Pointer to the factor array of unsigned 32-bit integer elements.</param>
            <param name="y">The unsigned 32-bit integer constant to be multiplied by.</param>
            <param name="product">Pointer to the product array of unsigned 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and product.</param>
            <exception cref="T:System.NullReferenceException">If x or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V64sS64s_V64s(System.Int64*,System.Int64,System.Int64*,System.Int32)">
            <summary>Multiplies signed 64-bit integer array elements by a constant. Produces an array of signed 64-bit integer elements.</summary>
            <param name="x">Pointer to the factor array of signed 64-bit integer elements.</param>
            <param name="y">The signed 64-bit integer constant to be multiplied by.</param>
            <param name="product">Pointer to the product array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and product.</param>
            <exception cref="T:System.NullReferenceException">If x or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V32fS32f_V32f(System.Single*,System.Single,System.Single*,System.Int32)">
            <summary>Multiplies single precision (32-bit) floating-point array elements by a constant. Produces an array of single precision (32-bit) floating-point elements.</summary>
            <param name="x">Pointer to the factor array of single precision (32-bit) floating-point elements.</param>
            <param name="y">The single precision (32-bit) floating-point constant to be multiplied by.</param>
            <param name="product">Pointer to the product array of single precision (32-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and product.</param>
            <exception cref="T:System.NullReferenceException">If x or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_V64fS64f_V64f(System.Double*,System.Double,System.Double*,System.Int32)">
            <summary>Multiplies double precision (64-bit) floating-point array elements by a constant. Produces an array of double precision (64-bit) floating-point elements.</summary>
            <param name="x">Pointer to the factor array of double precision (64-bit) floating-point elements.</param>
            <param name="y">The double precision (64-bit) floating-point constant to be multiplied by.</param>
            <param name="product">Pointer to the product array of double precision (64-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and product.</param>
            <exception cref="T:System.NullReferenceException">If x or product is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or product is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV8sV8s_IV8s(System.SByte*,System.SByte*,System.Int32)">
            <summary>Multiplies corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first factor array of signed 8-bit integer elements.</param>
            <param name="y">Pointer to the second factor array of signed 8-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV16sV16s_IV16s(System.Int16*,System.Int16*,System.Int32)">
            <summary>Multiplies corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first factor array of signed 16-bit integer elements.</param>
            <param name="y">Pointer to the second factor array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV32sV32s_IV32s(System.Int32*,System.Int32*,System.Int32)">
            <summary>Multiplies corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first factor array of signed 32-bit integer elements.</param>
            <param name="y">Pointer to the second factor array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV64sV64s_IV64s(System.Int64*,System.Int64*,System.Int32)">
            <summary>Multiplies corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first factor array of signed 64-bit integer elements.</param>
            <param name="y">Pointer to the second factor array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV32fV32f_IV32f(System.Single*,System.Single*,System.Int32)">
            <summary>Multiplies corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first factor array of single precision (32-bit) floating-point elements.</param>
            <param name="y">Pointer to the second factor array of single precision (32-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV64fV64f_IV64f(System.Double*,System.Double*,System.Int32)">
            <summary>Multiplies corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the first factor array of double precision (64-bit) floating-point elements.</param>
            <param name="y">Pointer to the second factor array of double precision (64-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV8sS8s_IV8s(System.SByte*,System.SByte,System.Int32)">
            <summary>Multiplies signed 8-bit integer array elements by a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the factor array of signed 8-bit integer elements.</param>
            <param name="y">The signed 8-bit integer constant factor.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV16sS16s_IV16s(System.Int16*,System.Int16,System.Int32)">
            <summary>Multiplies signed 16-bit integer array elements by a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the factor array of signed 16-bit integer elements.</param>
            <param name="y">The signed 16-bit integer constant factor.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV32sS32s_IV32s(System.Int32*,System.Int32,System.Int32)">
            <summary>Multiplies signed 32-bit integer array elements by a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the factor array of signed 32-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant factor.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV64sS64s_IV64s(System.Int64*,System.Int64,System.Int32)">
            <summary>Multiplies signed 64-bit integer array elements by a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the factor array of signed 64-bit integer elements.</param>
            <param name="y">The signed 64-bit integer constant factor.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV32fS32f_IV32f(System.Single*,System.Single,System.Int32)">
            <summary>Multiplies single precision (32-bit) floating-point array elements by a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the factor array of single precision (32-bit) floating-point elements.</param>
            <param name="y">The single precision (32-bit) floating-point constant factor.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Multiply_IV64fS64f_IV64f(System.Double*,System.Double,System.Int32)">
            <summary>Multiplies double precision (64-bit) floating-point array elements by a constant and writes the result to the same array.</summary>
            <param name="x">Pointer to the factor array of double precision (64-bit) floating-point elements.</param>
            <param name="y">The double precision (64-bit) floating-point constant factor.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_V8s_V8s(System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int32)">
            <summary>Negates elements in signed 8-bit integer array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_V16s_V16s(System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Negates elements in signed 16-bit integer array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_V32s_V32s(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Negates elements in signed 32-bit integer array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_V64s_V64s(System.Int64[],System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Negates elements in signed 64-bit integer array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_V32f_V32f(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>Negates elements in single precision (32-bit) floating-point array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_V64f_V64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Negates elements in double precision (64-bit) floating-point array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_IV8s_IV8s(System.SByte[],System.Int32,System.Int32)">
            <summary>Negates elements in signed 8-bit integer array and writes the results to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_IV16s_IV16s(System.Int16[],System.Int32,System.Int32)">
            <summary>Negates elements in signed 16-bit integer array and writes the results to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_IV32s_IV32s(System.Int32[],System.Int32,System.Int32)">
            <summary>Negates elements in signed 32-bit integer array and writes the results to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_IV64s_IV64s(System.Int64[],System.Int32,System.Int32)">
            <summary>Negates elements in signed 64-bit integer array and writes the results to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_IV32f_IV32f(System.Single[],System.Int32,System.Int32)">
            <summary>Negates elements in single precision (32-bit) floating-point array and writes the results to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_IV64f_IV64f(System.Double[],System.Int32,System.Int32)">
            <summary>Negates elements in double precision (64-bit) floating-point array and writes the results to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_V8s_V8s(System.SByte*,System.SByte*,System.Int32)">
            <summary>Negates elements in signed 8-bit integer array.</summary>
            <param name="x">Pointer to the array of signed 8-bit integer elements to be negated.</param>
            <param name="y">Pointer to the signed 8-bit integer array to store negated elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_V16s_V16s(System.Int16*,System.Int16*,System.Int32)">
            <summary>Negates elements in signed 16-bit integer array.</summary>
            <param name="x">Pointer to the array of signed 16-bit integer elements to be negated.</param>
            <param name="y">Pointer to the signed 16-bit integer array to store negated elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_V32s_V32s(System.Int32*,System.Int32*,System.Int32)">
            <summary>Negates elements in signed 32-bit integer array.</summary>
            <param name="x">Pointer to the array of signed 32-bit integer elements to be negated.</param>
            <param name="y">Pointer to the signed 32-bit integer array to store negated elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_V64s_V64s(System.Int64*,System.Int64*,System.Int32)">
            <summary>Negates elements in signed 64-bit integer array.</summary>
            <param name="x">Pointer to the array of signed 64-bit integer elements to be negated.</param>
            <param name="y">Pointer to the signed 64-bit integer array to store negated elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_V32f_V32f(System.Single*,System.Single*,System.Int32)">
            <summary>Negates elements in single precision (32-bit) floating-point array.</summary>
            <param name="x">Pointer to the array of single precision (32-bit) floating-point elements to be negated.</param>
            <param name="y">Pointer to the single precision (32-bit) floating-point array to store negated elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_V64f_V64f(System.Double*,System.Double*,System.Int32)">
            <summary>Negates elements in double precision (64-bit) floating-point array.</summary>
            <param name="x">Pointer to the array of double precision (64-bit) floating-point elements to be negated.</param>
            <param name="y">Pointer to the double precision (64-bit) floating-point array to store negated elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_IV8s_IV8s(System.SByte*,System.Int32)">
            <summary>Negates elements in signed 8-bit integer array and writes the results to the same array.</summary>
            <param name="v">Pointer to the array of signed 8-bit integer elements to be negated.</param>
            <param name="length">Length of the array specified by v.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_IV16s_IV16s(System.Int16*,System.Int32)">
            <summary>Negates elements in signed 16-bit integer array and writes the results to the same array.</summary>
            <param name="v">Pointer to the array of signed 16-bit integer elements to be negated.</param>
            <param name="length">Length of the array specified by v.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_IV32s_IV32s(System.Int32*,System.Int32)">
            <summary>Negates elements in signed 32-bit integer array and writes the results to the same array.</summary>
            <param name="v">Pointer to the array of signed 32-bit integer elements to be negated.</param>
            <param name="length">Length of the array specified by v.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_IV64s_IV64s(System.Int64*,System.Int32)">
            <summary>Negates elements in signed 64-bit integer array and writes the results to the same array.</summary>
            <param name="v">Pointer to the array of signed 64-bit integer elements to be negated.</param>
            <param name="length">Length of the array specified by v.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_IV32f_IV32f(System.Single*,System.Int32)">
            <summary>Negates elements in single precision (32-bit) floating-point array and writes the results to the same array.</summary>
            <param name="v">Pointer to the array of single precision (32-bit) floating-point elements to be negated.</param>
            <param name="length">Length of the array specified by v.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Negate_IV64f_IV64f(System.Double*,System.Int32)">
            <summary>Negates elements in double precision (64-bit) floating-point array and writes the results to the same array.</summary>
            <param name="v">Pointer to the array of double precision (64-bit) floating-point elements to be negated.</param>
            <param name="length">Length of the array specified by v.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V8sV8s_V8s(System.SByte[],System.Int32,System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 8-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or diffArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V8sV8s_V16s(System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V8uV8u_V16u(System.Byte[],System.Int32,System.Byte[],System.Int32,System.UInt16[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two unsigned 8-bit integer arrays. Produces an array of unsigned 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V16sV16s_V16s(System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V16sV16s_V32s(System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V16uV16u_V32u(System.UInt16[],System.Int32,System.UInt16[],System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two unsigned 16-bit integer arrays. Produces an array of unsigned 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32sV32s_V32s(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32sV32s_V64s(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32uV32u_V64u(System.UInt32[],System.Int32,System.UInt32[],System.Int32,System.UInt64[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two unsigned 32-bit integer arrays. Produces an array of unsigned 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V64sV64s_V64s(System.Int64[],System.Int32,System.Int64[],System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 64-bit integer arrays. Produces an array of signed 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32fV32f_V32f(System.Single[],System.Int32,System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two single precision (32-bit) floating-point arrays. Produces an array of single precision (32-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V64fV64f_V64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two double precision (64-bit) floating-point arrays. Produces an array of double precision (64-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray, yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray, yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V8sS8s_V8s(System.SByte[],System.Int32,System.SByte,System.SByte[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 8-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or diffArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V8sS8s_V16s(System.SByte[],System.Int32,System.SByte,System.Int16[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V8uS8u_V16u(System.Byte[],System.Int32,System.Byte,System.UInt16[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two unsigned 8-bit integer arrays. Produces an array of unsigned 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V16sS16s_V16s(System.Int16[],System.Int32,System.Int16,System.Int16[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V16sS16s_V32s(System.Int16[],System.Int32,System.Int16,System.Int32[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V16uS16u_V32u(System.UInt16[],System.Int32,System.UInt16,System.UInt32[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two unsigned 16-bit integer arrays. Produces an array of unsigned 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32sS32s_V32s(System.Int32[],System.Int32,System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32sS32s_V64s(System.Int32[],System.Int32,System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32uS32u_V64u(System.UInt32[],System.Int32,System.UInt32,System.UInt64[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two unsigned 32-bit integer arrays. Produces an array of unsigned 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V64sS64s_V64s(System.Int64[],System.Int32,System.Int64,System.Int64[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 64-bit integer arrays. Produces an array of signed 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32fS32f_V32f(System.Single[],System.Int32,System.Single,System.Single[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two single precision (32-bit) floating-point arrays. Produces an array of single precision (32-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V64fS64f_V64f(System.Double[],System.Int32,System.Double,System.Double[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two double precision (64-bit) floating-point arrays. Produces an array of double precision (64-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S8sV8s_V8s(System.SByte,System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int32)">
            <summary>Subtracts signed 8-bit integer array elements from a constant. Produces an array of signed 8-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If yArray or diffArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S8sV8s_V16s(System.SByte,System.SByte[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Subtracts signed 8-bit integer array elements from a constant. Produces an array of signed 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S8uV8u_V16u(System.Byte,System.Byte[],System.Int32,System.UInt16[],System.Int32,System.Int32)">
            <summary>Subtracts unsigned 8-bit integer array elements from a constant. Produces an array of unsigned 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S16sV16s_V16s(System.Int16,System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Subtracts signed 16-bit integer array elements from a constant. Produces an array of signed 16-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S16sV16s_V32s(System.Int16,System.Int16[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Subtracts signed 16-bit integer array elements from a constant. Produces an array of signed 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S16uV16u_V32u(System.UInt16,System.UInt16[],System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>Subtracts unsigned 16-bit integer array elements from a constant. Produces an array of unsigned 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S32sV32s_V32s(System.Int32,System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Subtracts signed 32-bit integer array elements from a constant. Produces an array of signed 32-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S32sV32s_V64s(System.Int32,System.Int32[],System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Subtracts signed 32-bit integer array elements from a constant. Produces an array of signed 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S32uV32u_V64u(System.UInt32,System.UInt32[],System.Int32,System.UInt64[],System.Int32,System.Int32)">
            <summary>Subtracts unsigned 32-bit integer array elements from a constant. Produces an array of unsigned 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S64sV64s_V64s(System.Int64,System.Int64[],System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Subtracts signed 64-bit integer array elements from a constant. Produces an array of signed 64-bit integer elements.</summary>
            <exception cref="T:System.NullReferenceException">If yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S32fV32f_V32f(System.Single,System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>Subtracts single precision (32-bit) floating-point array elements from a constant. Produces an array of single precision (32-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S64fV64f_V64f(System.Double,System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Subtracts double precision (64-bit) floating-point array elements from a constant. Produces an array of double precision (64-bit) floating-point elements.</summary>
            <exception cref="T:System.NullReferenceException">If yArray or diffArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If yArray or diffArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, diffOffset is negative, diffOffset + length exceeds the length of diffArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV8sV8s_IV8s(System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV16sV16s_IV16s(System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV32sV32s_IV32s(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV64sV64s_IV64s(System.Int64[],System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV32fV32f_IV32f(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV64fV64f_IV64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V8sIV8s_IV8s(System.SByte[],System.Int32,System.SByte[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 8-bit integer arrays and writes the result to the second array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V16sIV16s_IV16s(System.Int16[],System.Int32,System.Int16[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 16-bit integer arrays and writes the result to the second array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32sIV32s_IV32s(System.Int32[],System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 32-bit integer arrays and writes the result to the second array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V64sIV64s_IV64s(System.Int64[],System.Int32,System.Int64[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 64-bit integer arrays and writes the result to the second array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32fIV32f_IV32f(System.Single[],System.Int32,System.Single[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the second array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V64fIV64f_IV64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Subtracts corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the second array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV8sS8s_IV8s(System.SByte[],System.Int32,System.SByte,System.Int32)">
            <summary>Subtracts a constant from signed 8-bit integer array elements and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV16sS16s_IV16s(System.Int16[],System.Int32,System.Int16,System.Int32)">
            <summary>Subtracts a constant from signed 16-bit integer array elements and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV32sS32s_IV32s(System.Int32[],System.Int32,System.Int32,System.Int32)">
            <summary>Subtracts a constant from signed 32-bit integer array elements and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV64sS64s_IV64s(System.Int64[],System.Int32,System.Int64,System.Int32)">
            <summary>Subtracts a constant from signed 64-bit integer array elements and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV32fS32f_IV32f(System.Single[],System.Int32,System.Single,System.Int32)">
            <summary>Subtracts a constant from single precision (32-bit) floating-point array elements and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV64fS64f_IV64f(System.Double[],System.Int32,System.Double,System.Int32)">
            <summary>Subtracts a constant from double precision (64-bit) floating-point array elements and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If xArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S8sIV8s_IV8s(System.SByte,System.SByte[],System.Int32,System.Int32)">
            <summary>Subtracts signed 8-bit integer array elements from a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If yArray is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S16sIV16s_IV16s(System.Int16,System.Int16[],System.Int32,System.Int32)">
            <summary>Subtracts signed 16-bit integer array elements from a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S32sIV32s_IV32s(System.Int32,System.Int32[],System.Int32,System.Int32)">
            <summary>Subtracts signed 32-bit integer array elements from a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S64sIV64s_IV64s(System.Int64,System.Int64[],System.Int32,System.Int32)">
            <summary>Subtracts signed 64-bit integer array elements from a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S32fIV32f_IV32f(System.Single,System.Single[],System.Int32,System.Int32)">
            <summary>Subtracts single precision (32-bit) floating-point array elements from a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S64fIV64f_IV64f(System.Double,System.Double[],System.Int32,System.Int32)">
            <summary>Subtracts double precision (64-bit) floating-point array elements from a constant and writes the result to the same array.</summary>
            <exception cref="T:System.NullReferenceException">If yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V8sV8s_V8s(System.SByte*,System.SByte*,System.SByte*,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 8-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of signed 8-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of signed 8-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of signed 8-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and diff.</param>
            <exception cref="T:System.NullReferenceException">If x, y or diff is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V8sV8s_V16s(System.SByte*,System.SByte*,System.Int16*,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 8-bit integer arrays. Produces an array of signed 16-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of signed 8-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of signed 8-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and diff.</param>
            <exception cref="T:System.NullReferenceException">If x, y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V8uV8u_V16u(System.Byte*,System.Byte*,System.UInt16*,System.Int32)">
            <summary>Subtracts corresponding elements in two unsigned 8-bit integer arrays. Produces an array of unsigned 16-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of unsigned 8-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of unsigned 8-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of unsigned 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and diff.</param>
            <exception cref="T:System.NullReferenceException">If x, y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V16sV16s_V16s(System.Int16*,System.Int16*,System.Int16*,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 16-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of signed 16-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of signed 16-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and diff.</param>
            <exception cref="T:System.NullReferenceException">If x, y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V16sV16s_V32s(System.Int16*,System.Int16*,System.Int32*,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 16-bit integer arrays. Produces an array of signed 32-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of signed 16-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of signed 16-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and diff.</param>
            <exception cref="T:System.NullReferenceException">If x, y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V16uV16u_V32u(System.UInt16*,System.UInt16*,System.UInt32*,System.Int32)">
            <summary>Subtracts corresponding elements in two unsigned 16-bit integer arrays. Produces an array of unsigned 32-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of unsigned 16-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of unsigned 16-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of unsigned 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and diff.</param>
            <exception cref="T:System.NullReferenceException">If x, y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32sV32s_V32s(System.Int32*,System.Int32*,System.Int32*,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 32-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of signed 32-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of signed 32-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and diff.</param>
            <exception cref="T:System.NullReferenceException">If x, y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32sV32s_V64s(System.Int32*,System.Int32*,System.Int64*,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 32-bit integer arrays. Produces an array of signed 64-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of signed 32-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of signed 32-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and diff.</param>
            <exception cref="T:System.NullReferenceException">If x, y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32uV32u_V64u(System.UInt32*,System.UInt32*,System.UInt64*,System.Int32)">
            <summary>Subtracts corresponding elements in two unsigned 32-bit integer arrays. Produces an array of unsigned 64-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of unsigned 32-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of unsigned 32-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of unsigned 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and diff.</param>
            <exception cref="T:System.NullReferenceException">If x, y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V64sV64s_V64s(System.Int64*,System.Int64*,System.Int64*,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 64-bit integer arrays. Produces an array of signed 64-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of signed 64-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of signed 64-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x, y, and diff.</param>
            <exception cref="T:System.NullReferenceException">If x, y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32fV32f_V32f(System.Single*,System.Single*,System.Single*,System.Int32)">
            <summary>Subtracts corresponding elements in two single precision (32-bit) floating-point arrays. Produces an array of single precision (32-bit) floating-point elements.</summary>
            <param name="x">Pointer to the minuend array of single precision (32-bit) floating-point elements.</param>
            <param name="y">Pointer to the subtrahend array of single precision (32-bit) floating-point elements.</param>
            <param name="diff">Pointer to the difference array of single precision (32-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x, y, and diff.</param>
            <exception cref="T:System.NullReferenceException">If x, y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V64fV64f_V64f(System.Double*,System.Double*,System.Double*,System.Int32)">
            <summary>Subtracts corresponding elements in two double precision (64-bit) floating-point arrays. Produces an array of double precision (64-bit) floating-point elements.</summary>
            <param name="x">Pointer to the minuend array of double precision (64-bit) floating-point elements.</param>
            <param name="y">Pointer to the subtrahend array of double precision (64-bit) floating-point elements.</param>
            <param name="diff">Pointer to the difference array of double precision (64-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x, y, and diff.</param>
            <exception cref="T:System.NullReferenceException">If x, y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x, y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V8sS8s_V8s(System.SByte*,System.SByte,System.SByte*,System.Int32)">
            <summary>Subtracts a constant from signed 8-bit integer array elements. Produces an array of signed 8-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of signed 8-bit integer elements.</param>
            <param name="y">The signed 8-bit integer constant to be subtracted.</param>
            <param name="diff">Pointer to the difference array of signed 8-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and diff.</param>
            <exception cref="T:System.NullReferenceException">If x or diff is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V8sS8s_V16s(System.SByte*,System.SByte,System.Int16*,System.Int32)">
            <summary>Subtracts a constant from signed 8-bit integer array elements. Produces an array of signed 16-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of signed 8-bit integer elements.</param>
            <param name="y">The signed 8-bit integer constant to be subtracted.</param>
            <param name="diff">Pointer to the difference array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and diff.</param>
            <exception cref="T:System.NullReferenceException">If x or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V8uS8u_V16u(System.Byte*,System.Byte,System.UInt16*,System.Int32)">
            <summary>Subtracts a constant from unsigned 8-bit integer array elements. Produces an array of unsigned 16-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of unsigned 8-bit integer elements.</param>
            <param name="y">The unsigned 8-bit integer constant to be subtracted.</param>
            <param name="diff">Pointer to the difference array of unsigned 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and diff.</param>
            <exception cref="T:System.NullReferenceException">If x or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V16sS16s_V16s(System.Int16*,System.Int16,System.Int16*,System.Int32)">
            <summary>Subtracts a constant from signed 16-bit integer array elements. Produces an array of signed 16-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of signed 16-bit integer elements.</param>
            <param name="y">The signed 16-bit integer constant to be subtracted.</param>
            <param name="diff">Pointer to the difference array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and diff.</param>
            <exception cref="T:System.NullReferenceException">If x or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V16sS16s_V32s(System.Int16*,System.Int16,System.Int32*,System.Int32)">
            <summary>Subtracts a constant from signed 16-bit integer array elements. Produces an array of signed 32-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of signed 16-bit integer elements.</param>
            <param name="y">The signed 16-bit integer constant to be subtracted.</param>
            <param name="diff">Pointer to the difference array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and diff.</param>
            <exception cref="T:System.NullReferenceException">If x or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V16uS16u_V32u(System.UInt16*,System.UInt16,System.UInt32*,System.Int32)">
            <summary>Subtracts a constant from unsigned 16-bit integer array elements. Produces an array of unsigned 32-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of unsigned 16-bit integer elements.</param>
            <param name="y">The unsigned 16-bit integer constant to be subtracted.</param>
            <param name="diff">Pointer to the difference array of unsigned 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and diff.</param>
            <exception cref="T:System.NullReferenceException">If x or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32sS32s_V32s(System.Int32*,System.Int32,System.Int32*,System.Int32)">
            <summary>Subtracts a constant from signed 32-bit integer array elements. Produces an array of signed 32-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of signed 32-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant to be subtracted.</param>
            <param name="diff">Pointer to the difference array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and diff.</param>
            <exception cref="T:System.NullReferenceException">If x or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32sS32s_V64s(System.Int32*,System.Int32,System.Int64*,System.Int32)">
            <summary>Subtracts a constant from signed 32-bit integer array elements. Produces an array of signed 64-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of signed 32-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant to be subtracted.</param>
            <param name="diff">Pointer to the difference array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and diff.</param>
            <exception cref="T:System.NullReferenceException">If x or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32uS32u_V64u(System.UInt32*,System.UInt32,System.UInt64*,System.Int32)">
            <summary>Subtracts a constant from unsigned 32-bit integer array elements. Produces an array of unsigned 64-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of unsigned 32-bit integer elements.</param>
            <param name="y">The unsigned 32-bit integer constant to be subtracted.</param>
            <param name="diff">Pointer to the difference array of unsigned 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and diff.</param>
            <exception cref="T:System.NullReferenceException">If x or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V64sS64s_V64s(System.Int64*,System.Int64,System.Int64*,System.Int32)">
            <summary>Subtracts a constant from signed 64-bit integer array elements. Produces an array of signed 64-bit integer elements.</summary>
            <param name="x">Pointer to the minuend array of signed 64-bit integer elements.</param>
            <param name="y">The signed 64-bit integer constant to be subtracted.</param>
            <param name="diff">Pointer to the difference array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and diff.</param>
            <exception cref="T:System.NullReferenceException">If x or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32fS32f_V32f(System.Single*,System.Single,System.Single*,System.Int32)">
            <summary>Subtracts a constant from single precision (32-bit) floating-point array elements. Produces an array of single precision (32-bit) floating-point elements.</summary>
            <param name="x">Pointer to the minuend array of single precision (32-bit) floating-point elements.</param>
            <param name="y">The single precision (32-bit) floating-point constant to be subtracted.</param>
            <param name="diff">Pointer to the difference array of single precision (32-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and diff.</param>
            <exception cref="T:System.NullReferenceException">If x or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V64fS64f_V64f(System.Double*,System.Double,System.Double*,System.Int32)">
            <summary>Subtracts a constant from double precision (64-bit) floating-point array elements. Produces an array of double precision (64-bit) floating-point elements.</summary>
            <param name="x">Pointer to the minuend array of double precision (64-bit) floating-point elements.</param>
            <param name="y">The double precision (64-bit) floating-point constant to be subtracted.</param>
            <param name="diff">Pointer to the difference array of double precision (64-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and diff.</param>
            <exception cref="T:System.NullReferenceException">If x or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S8sV8s_V8s(System.SByte,System.SByte*,System.SByte*,System.Int32)">
            <summary>Subtracts signed 8-bit integer array elements from a constant. Produces an array of signed 8-bit integer elements.</summary>
            <param name="x">The signed 8-bit integer constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of signed 8-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of signed 8-bit integer elements.</param>
            <param name="length">Length of the arrays specified by y and diff.</param>
            <exception cref="T:System.NullReferenceException">If y or diff is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S8sV8s_V16s(System.SByte,System.SByte*,System.Int16*,System.Int32)">
            <summary>Subtracts signed 8-bit integer array elements from a constant. Produces an array of signed 16-bit integer elements.</summary>
            <param name="x">The signed 8-bit integer constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of signed 8-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by y and diff.</param>
            <exception cref="T:System.NullReferenceException">If y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S8uV8u_V16u(System.Byte,System.Byte*,System.UInt16*,System.Int32)">
            <summary>Subtracts unsigned 8-bit integer array elements from a constant. Produces an array of unsigned 16-bit integer elements.</summary>
            <param name="x">The unsigned 8-bit integer constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of unsigned 8-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of unsigned 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by y and diff.</param>
            <exception cref="T:System.NullReferenceException">If y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S16sV16s_V16s(System.Int16,System.Int16*,System.Int16*,System.Int32)">
            <summary>Subtracts signed 16-bit integer array elements from a constant. Produces an array of signed 16-bit integer elements.</summary>
            <param name="x">The signed 16-bit integer constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of signed 16-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by y and diff.</param>
            <exception cref="T:System.NullReferenceException">If y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S16sV16s_V32s(System.Int16,System.Int16*,System.Int32*,System.Int32)">
            <summary>Subtracts signed 16-bit integer array elements from a constant. Produces an array of signed 32-bit integer elements.</summary>
            <param name="x">The signed 16-bit integer constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of signed 16-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by y and diff.</param>
            <exception cref="T:System.NullReferenceException">If y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S16uV16u_V32u(System.UInt16,System.UInt16*,System.UInt32*,System.Int32)">
            <summary>Subtracts unsigned 16-bit integer array elements from a constant. Produces an array of unsigned 32-bit integer elements.</summary>
            <param name="x">The unsigned 16-bit integer constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of unsigned 16-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of unsigned 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by y and diff.</param>
            <exception cref="T:System.NullReferenceException">If y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S32sV32s_V32s(System.Int32,System.Int32*,System.Int32*,System.Int32)">
            <summary>Subtracts signed 32-bit integer array elements from a constant. Produces an array of signed 32-bit integer elements.</summary>
            <param name="x">The signed 32-bit integer constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of signed 32-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by y and diff.</param>
            <exception cref="T:System.NullReferenceException">If y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S32sV32s_V64s(System.Int32,System.Int32*,System.Int64*,System.Int32)">
            <summary>Subtracts signed 32-bit integer array elements from a constant. Produces an array of signed 64-bit integer elements.</summary>
            <param name="x">The signed 32-bit integer constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of signed 32-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by y and diff.</param>
            <exception cref="T:System.NullReferenceException">If y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S32uV32u_V64u(System.UInt32,System.UInt32*,System.UInt64*,System.Int32)">
            <summary>Subtracts unsigned 32-bit integer array elements from a constant. Produces an array of unsigned 64-bit integer elements.</summary>
            <param name="x">The unsigned 32-bit integer constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of unsigned 32-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of unsigned 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by y and diff.</param>
            <exception cref="T:System.NullReferenceException">If y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S64sV64s_V64s(System.Int64,System.Int64*,System.Int64*,System.Int32)">
            <summary>Subtracts signed 64-bit integer array elements from a constant. Produces an array of signed 64-bit integer elements.</summary>
            <param name="x">The signed 64-bit integer constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of signed 64-bit integer elements.</param>
            <param name="diff">Pointer to the difference array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by y and diff.</param>
            <exception cref="T:System.NullReferenceException">If y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S32fV32f_V32f(System.Single,System.Single*,System.Single*,System.Int32)">
            <summary>Subtracts single precision (32-bit) floating-point array elements from a constant. Produces an array of single precision (32-bit) floating-point elements.</summary>
            <param name="x">The single precision (32-bit) floating-point constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of single precision (32-bit) floating-point elements.</param>
            <param name="diff">Pointer to the difference array of single precision (32-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by y and diff.</param>
            <exception cref="T:System.NullReferenceException">If y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S64fV64f_V64f(System.Double,System.Double*,System.Double*,System.Int32)">
            <summary>Subtracts double precision (64-bit) floating-point array elements from a constant. Produces an array of double precision (64-bit) floating-point elements.</summary>
            <param name="x">The double precision (64-bit) floating-point constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of double precision (64-bit) floating-point elements.</param>
            <param name="diff">Pointer to the difference array of double precision (64-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by y and diff.</param>
            <exception cref="T:System.NullReferenceException">If y or diff is null.</exception>
            <exception cref="T:System.DataMisalignedException">If y or diff is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV8sV8s_IV8s(System.SByte*,System.SByte*,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 8-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the minuend array of signed 8-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of signed 8-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV16sV16s_IV16s(System.Int16*,System.Int16*,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 16-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the minuend array of signed 16-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV32sV32s_IV32s(System.Int32*,System.Int32*,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 32-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the minuend array of signed 32-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV64sV64s_IV64s(System.Int64*,System.Int64*,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 64-bit integer arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the minuend array of signed 64-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV32fV32f_IV32f(System.Single*,System.Single*,System.Int32)">
            <summary>Subtracts corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the minuend array of single precision (32-bit) floating-point elements.</param>
            <param name="y">Pointer to the subtrahend array of single precision (32-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV64fV64f_IV64f(System.Double*,System.Double*,System.Int32)">
            <summary>Subtracts corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the first array.</summary>
            <param name="x">Pointer to the minuend array of double precision (64-bit) floating-point elements.</param>
            <param name="y">Pointer to the subtrahend array of double precision (64-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V8sIV8s_IV8s(System.SByte*,System.SByte*,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 8-bit integer arrays and writes the result to the second array.</summary>
            <param name="x">Pointer to the minuend array of signed 8-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of signed 8-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V16sIV16s_IV16s(System.Int16*,System.Int16*,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 16-bit integer arrays and writes the result to the second array.</summary>
            <param name="x">Pointer to the minuend array of signed 16-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of signed 16-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32sIV32s_IV32s(System.Int32*,System.Int32*,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 32-bit integer arrays and writes the result to the second array.</summary>
            <param name="x">Pointer to the minuend array of signed 32-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of signed 32-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V64sIV64s_IV64s(System.Int64*,System.Int64*,System.Int32)">
            <summary>Subtracts corresponding elements in two signed 64-bit integer arrays and writes the result to the second array.</summary>
            <param name="x">Pointer to the minuend array of signed 64-bit integer elements.</param>
            <param name="y">Pointer to the subtrahend array of signed 64-bit integer elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V32fIV32f_IV32f(System.Single*,System.Single*,System.Int32)">
            <summary>Subtracts corresponding elements in two single precision (32-bit) floating-point arrays and writes the result to the second array.</summary>
            <param name="x">Pointer to the minuend array of single precision (32-bit) floating-point elements.</param>
            <param name="y">Pointer to the subtrahend array of single precision (32-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_V64fIV64f_IV64f(System.Double*,System.Double*,System.Int32)">
            <summary>Subtracts corresponding elements in two double precision (64-bit) floating-point arrays and writes the result to the second array.</summary>
            <param name="x">Pointer to the minuend array of double precision (64-bit) floating-point elements.</param>
            <param name="y">Pointer to the subtrahend array of double precision (64-bit) floating-point elements.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV8sS8s_IV8s(System.SByte*,System.SByte,System.Int32)">
            <summary>Subtracts a constant from signed 8-bit integer array elements and writes the result to the same array.</summary>
            <param name="x">Pointer to the minuend array of signed 8-bit integer elements.</param>
            <param name="y">The signed 8-bit integer constant to be subtracted.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV16sS16s_IV16s(System.Int16*,System.Int16,System.Int32)">
            <summary>Subtracts a constant from signed 16-bit integer array elements and writes the result to the same array.</summary>
            <param name="x">Pointer to the minuend array of signed 16-bit integer elements.</param>
            <param name="y">The signed 16-bit integer constant to be subtracted.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV32sS32s_IV32s(System.Int32*,System.Int32,System.Int32)">
            <summary>Subtracts a constant from signed 32-bit integer array elements and writes the result to the same array.</summary>
            <param name="x">Pointer to the minuend array of signed 32-bit integer elements.</param>
            <param name="y">The signed 32-bit integer constant to be subtracted.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV64sS64s_IV64s(System.Int64*,System.Int64,System.Int32)">
            <summary>Subtracts a constant from signed 64-bit integer array elements and writes the result to the same array.</summary>
            <param name="x">Pointer to the minuend array of signed 64-bit integer elements.</param>
            <param name="y">The signed 64-bit integer constant to be subtracted.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV32fS32f_IV32f(System.Single*,System.Single,System.Int32)">
            <summary>Subtracts a constant from single precision (32-bit) floating-point array elements and writes the result to the same array.</summary>
            <param name="x">Pointer to the minuend array of single precision (32-bit) floating-point elements.</param>
            <param name="y">The single precision (32-bit) floating-point constant to be subtracted.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_IV64fS64f_IV64f(System.Double*,System.Double,System.Int32)">
            <summary>Subtracts a constant from double precision (64-bit) floating-point array elements and writes the result to the same array.</summary>
            <param name="x">Pointer to the minuend array of double precision (64-bit) floating-point elements.</param>
            <param name="y">The double precision (64-bit) floating-point constant to be subtracted.</param>
            <param name="length">Length of the array specified by x.</param>
            <exception cref="T:System.NullReferenceException">If x is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S8sIV8s_IV8s(System.SByte,System.SByte*,System.Int32)">
            <summary>Subtracts signed 8-bit integer array elements from a constant and writes the result to the same array.</summary>
            <param name="x">The signed 8-bit integer constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of signed 8-bit integer elements.</param>
            <param name="length">Length of the array specified by y.</param>
            <exception cref="T:System.NullReferenceException">If y is null.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S16sIV16s_IV16s(System.Int16,System.Int16*,System.Int32)">
            <summary>Subtracts signed 16-bit integer array elements from a constant and writes the result to the same array.</summary>
            <param name="x">The signed 16-bit integer constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of signed 16-bit integer elements.</param>
            <param name="length">Length of the array specified by y.</param>
            <exception cref="T:System.NullReferenceException">If y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S32sIV32s_IV32s(System.Int32,System.Int32*,System.Int32)">
            <summary>Subtracts signed 32-bit integer array elements from a constant and writes the result to the same array.</summary>
            <param name="x">The signed 32-bit integer constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of signed 32-bit integer elements.</param>
            <param name="length">Length of the array specified by y.</param>
            <exception cref="T:System.NullReferenceException">If y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S64sIV64s_IV64s(System.Int64,System.Int64*,System.Int32)">
            <summary>Subtracts signed 64-bit integer array elements from a constant and writes the result to the same array.</summary>
            <param name="x">The signed 64-bit integer constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of signed 64-bit integer elements.</param>
            <param name="length">Length of the array specified by y.</param>
            <exception cref="T:System.NullReferenceException">If y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S32fIV32f_IV32f(System.Single,System.Single*,System.Int32)">
            <summary>Subtracts single precision (32-bit) floating-point array elements from a constant and writes the result to the same array.</summary>
            <param name="x">The single precision (32-bit) floating-point constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of single precision (32-bit) floating-point elements.</param>
            <param name="length">Length of the array specified by y.</param>
            <exception cref="T:System.NullReferenceException">If y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Subtract_S64fIV64f_IV64f(System.Double,System.Double*,System.Int32)">
            <summary>Subtracts double precision (64-bit) floating-point array elements from a constant and writes the result to the same array.</summary>
            <param name="x">The double precision (64-bit) floating-point constant to be subtracted from.</param>
            <param name="y">Pointer to the subtrahend array of double precision (64-bit) floating-point elements.</param>
            <param name="length">Length of the array specified by y.</param>
            <exception cref="T:System.NullReferenceException">If y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Sum_V32f_S32f(System.Single[],System.Int32,System.Int32)">
            <summary>Computes the sum of single precision (32-bit) floating-point array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Sum_V64f_S64f(System.Double[],System.Int32,System.Int32)">
            <summary>Computes the sum of double precision (64-bit) floating-point array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Sum_V32f_S32f(System.Single*,System.Int32)">
            <summary>Computes the sum of single precision (32-bit) floating-point array elements.</summary>
            <param name="v">Pointer to the array of elements which will be summed up.</param>
            <param name="length">Length of the array specified by v. If length is zero, the computed sum will be 0.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.Sum_V64f_S64f(System.Double*,System.Int32)">
            <summary>Computes the sum of double precision (64-bit) floating-point array elements.</summary>
            <param name="v">Pointer to the array of elements which will be summed up.</param>
            <param name="length">Length of the array specified by v. If length is zero, the computed sum will be 0.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.SumAbs_V32f_S32f(System.Single[],System.Int32,System.Int32)">
            <summary>Computes the sum of absolute values of single precision (32-bit) floating-point array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.SumAbs_V64f_S64f(System.Double[],System.Int32,System.Int32)">
            <summary>Computes the sum of absolute values of double precision (64-bit) floating-point array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.SumAbs_V32f_S32f(System.Single*,System.Int32)">
            <summary>Computes the sum of absolute values of single precision (32-bit) floating-point array elements.</summary>
            <param name="v">Pointer to the array of elements whose absolute values will be summed up.</param>
            <param name="length">Length of the array specified by v. If length is zero, the computed sum will be 0.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.SumAbs_V64f_S64f(System.Double*,System.Int32)">
            <summary>Computes the sum of absolute values of double precision (64-bit) floating-point array elements.</summary>
            <param name="v">Pointer to the array of elements whose absolute values will be summed up.</param>
            <param name="length">Length of the array specified by v. If length is zero, the computed sum will be 0.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.SumSquares_V32f_S32f(System.Single[],System.Int32,System.Int32)">
            <summary>Computes the sum of squares of single precision (32-bit) floating-point array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.SumSquares_V64f_S64f(System.Double[],System.Int32,System.Int32)">
            <summary>Computes the sum of squares of double precision (64-bit) floating-point array elements.</summary>
            <exception cref="T:System.NullReferenceException">If vArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If vArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If vOffset is negative, vOffset + length exceeds the length of vArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.SumSquares_V32f_S32f(System.Single*,System.Int32)">
            <summary>Computes the sum of squares of single precision (32-bit) floating-point array elements.</summary>
            <param name="v">Pointer to the array of elements which will be squared (without write-back) and summed up.</param>
            <param name="length">Length of the array specified by v. If length is zero, the computed sum of squares will be 0.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Core.SumSquares_V64f_S64f(System.Double*,System.Int32)">
            <summary>Computes the sum of squares of double precision (64-bit) floating-point array elements.</summary>
            <param name="v">Pointer to the array of elements which will be squared (without write-back) and summed up.</param>
            <param name="length">Length of the array specified by v. If length is zero, the computed sum of squares will be 0.</param>
            <exception cref="T:System.NullReferenceException">If v is null.</exception>
            <exception cref="T:System.DataMisalignedException">If v is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="T:Yeppp.ABI">
            <summary>Application binary interface.</summary>
            <seealso cref="M:Yeppp.Library.GetProcessABI"/>
        </member>
        <member name="F:Yeppp.ABI.Unknown">
            <summary>Application binary interface not known to the library.</summary>
            <remarks>This value is never returned on supported platforms.</remarks>
        </member>
        <member name="F:Yeppp.ABI.Windows_X86">
            <summary>Windows x86 ABI.</summary>
        </member>
        <member name="F:Yeppp.ABI.Windows_X86_64">
            <summary>Windows x86-64 ABI.</summary>
        </member>
        <member name="F:Yeppp.ABI.Windows_IA64">
            <summary>Windows IA64 ABI.</summary>
        </member>
        <member name="F:Yeppp.ABI.Windows_ARM">
            <summary>Windows ARM ABI.</summary>
        </member>
        <member name="F:Yeppp.ABI.OSX_X86">
            <summary>OS X x86 ABI.</summary>
        </member>
        <member name="F:Yeppp.ABI.OSX_X86_64">
            <summary>OS X x86-64 ABI.</summary>
        </member>
        <member name="F:Yeppp.ABI.OSX_PPC">
            <summary>OS X PowerPC ABI.</summary>
        </member>
        <member name="F:Yeppp.ABI.OSX_PPC64">
            <summary>OS X PowerPC 64 ABI.</summary>
        </member>
        <member name="F:Yeppp.ABI.Linux_X86">
            <summary>Linux x86 ABI.</summary>
        </member>
        <member name="F:Yeppp.ABI.Linux_X86_64">
            <summary>Linux x86-64 ABI.</summary>
        </member>
        <member name="F:Yeppp.ABI.Linux_X32">
            <summary>Linux x32 ABI.</summary>
        </member>
        <member name="F:Yeppp.ABI.Linux_IA64">
            <summary>Linux IA64 ABI.</summary>
        </member>
        <member name="F:Yeppp.ABI.Linux_K1OM">
            <summary>Linux K1OM (Xeon Phi) ABI.</summary>
        </member>
        <member name="F:Yeppp.ABI.Linux_ARM">
            <summary>Linux Legacy ARM ABI (OABI).</summary>
        </member>
        <member name="F:Yeppp.ABI.Linux_ARMEL">
            <summary>Linux ARM EABI with soft-float calling convention (armel, gnueabi).</summary>
        </member>
        <member name="F:Yeppp.ABI.Linux_ARMHF">
            <summary>Linux ARM EABI with hard-float calling convention (armhf, gnueabihf).</summary>
        </member>
        <member name="F:Yeppp.ABI.Linux_ARM64">
            <summary>Linux ARM64 (AArch64) ABI.</summary>
        </member>
        <member name="F:Yeppp.ABI.Linux_PPC">
            <summary>Linux PowerPC ABI.</summary>
        </member>
        <member name="F:Yeppp.ABI.Linux_PPC64">
            <summary>Linux PowerPC 64 ABI.</summary>
        </member>
        <member name="M:Yeppp.ABI.Equals(Yeppp.ABI)">
            <summary>Compares for equality with another <see cref="T:Yeppp.ABI"/> object.</summary>
            <remarks>Comparison is performed by value.</remarks>
        </member>
        <member name="M:Yeppp.ABI.Equals(System.Object)">
            <summary>Compares for equality with another object.</summary>
            <remarks>Comparison is performed by value.</remarks>
        </member>
        <member name="M:Yeppp.ABI.GetHashCode">
            <summary>Provides a hash for the object.</summary>
            <remarks>Non-equal <see cref="T:Yeppp.ABI"/> objects are guaranteed to have different hashes.</remarks>
        </member>
        <member name="M:Yeppp.ABI.ToString">
            <summary>Provides a string ID for the object.</summary>
            <remarks>The string ID starts with a Latin letter and contains only Latin letters, digits, and underscore symbol.</remarks>
            <seealso cref="P:Yeppp.ABI.Description"/>
        </member>
        <member name="M:Yeppp.ABI.IsWindows">
            <summary>Checks if the object represents one of Windows-specific ABIs.</summary>
            <returns>true if this is a Windows ABI and false otherwise.</returns>
            <seealso cref="M:Yeppp.ABI.IsUnix"/>
            <seealso cref="M:Yeppp.ABI.IsLinux"/>
            <seealso cref="M:Yeppp.ABI.IsOSX"/>
        </member>
        <member name="M:Yeppp.ABI.IsUnix">
            <summary>Checks if the object represents one of Unix-specific ABIs.</summary>
            <returns>true if this is a Unix ABI and false otherwise.</returns>
            <seealso cref="M:Yeppp.ABI.IsOSX"/>
            <seealso cref="M:Yeppp.ABI.IsLinux"/>
            <seealso cref="M:Yeppp.ABI.IsWindows"/>
        </member>
        <member name="M:Yeppp.ABI.IsLinux">
            <summary>Checks if the object represents one of Linux-specific ABIs.</summary>
            <returns>true if this is a Linux ABI and false otherwise.</returns>
            <seealso cref="M:Yeppp.ABI.IsUnix"/>
            <seealso cref="M:Yeppp.ABI.IsOSX"/>
            <seealso cref="M:Yeppp.ABI.IsWindows"/>
        </member>
        <member name="M:Yeppp.ABI.IsOSX">
            <summary>Checks if the object represents one of OSX-specific ABIs.</summary>
            <returns>true if this is an OSX ABI and false otherwise.</returns>
            <seealso cref="M:Yeppp.ABI.IsUnix"/>
            <seealso cref="M:Yeppp.ABI.IsLinux"/>
            <seealso cref="M:Yeppp.ABI.IsWindows"/>
        </member>
        <member name="P:Yeppp.ABI.Description">
            <summary>Provides a description for the object.</summary>
            <remarks>The description can contain spaces and non-ASCII characters.</remarks>
            <seealso cref="M:Yeppp.ABI.ToString"/>
        </member>
        <member name="T:Yeppp.ArmCpuIsaFeature">
            <summary>ARM-specific ISA extensions.</summary>
            <seealso cref="M:Yeppp.Library.IsSupported(Yeppp.CpuIsaFeature)"/>
        </member>
        <member name="T:Yeppp.CpuIsaFeature">
            <summary>ISA extensions.</summary>
            <seealso cref="P:Yeppp.CpuArchitecture.CpuIsaFeatures"/>
            <seealso cref="M:Yeppp.Library.IsSupported(Yeppp.CpuIsaFeature)"/>
            <seealso cref="T:Yeppp.X86CpuIsaFeature"/>
            <seealso cref="T:Yeppp.ArmCpuIsaFeature"/>
            <seealso cref="T:Yeppp.MipsCpuIsaFeature"/>
            <seealso cref="T:Yeppp.IA64CpuIsaFeature"/>
            <seealso cref="T:Yeppp.PowerPCCpuIsaFeature"/>
        </member>
        <member name="M:Yeppp.CpuIsaFeature.Equals(Yeppp.CpuIsaFeature)">
            <summary>Compares for equality with another <see cref="T:Yeppp.CpuIsaFeature"/> object.</summary>
            <remarks>Comparison is performed by value.</remarks>
        </member>
        <member name="M:Yeppp.CpuIsaFeature.Equals(System.Object)">
            <summary>Compares for equality with another object.</summary>
            <remarks>Comparison is performed by value.</remarks>
        </member>
        <member name="M:Yeppp.CpuIsaFeature.GetHashCode">
            <summary>Provides a hash for the object.</summary>
            <remarks>Non-equal <see cref="T:Yeppp.CpuIsaFeature"/> objects are guaranteed to have different hashes.</remarks>
        </member>
        <member name="M:Yeppp.CpuIsaFeature.ToString">
            <summary>Provides a string ID for the object.</summary>
            <remarks>The string ID starts with a Latin letter and contains only Latin letters, digits, and underscore symbol.</remarks>
            <seealso cref="P:Yeppp.CpuIsaFeature.Description"/>
        </member>
        <member name="P:Yeppp.CpuIsaFeature.Description">
            <summary>Provides a description for the object.</summary>
            <remarks>The description can contain spaces and non-ASCII characters.</remarks>
            <seealso cref="M:Yeppp.CpuIsaFeature.ToString"/>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.V4">
            <summary>ARMv4 instruction set.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.V5">
            <summary>ARMv5 instruciton set.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.V5E">
            <summary>ARMv5 DSP instructions.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.V6">
            <summary>ARMv6 instruction set.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.V6K">
            <summary>ARMv6 Multiprocessing extensions.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.V7">
            <summary>ARMv7 instruction set.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.V7MP">
            <summary>ARMv7 Multiprocessing extensions.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.Thumb">
            <summary>Thumb mode.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.Thumb2">
            <summary>Thumb 2 mode.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.ThumbEE">
            <summary>Thumb EE mode.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.Jazelle">
            <summary>Jazelle extensions.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.FPA">
            <summary>FPA instructions.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.VFP">
            <summary>VFP instruction set.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.VFP2">
            <summary>VFPv2 instruction set.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.VFP3">
            <summary>VFPv3 instruction set.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.VFPd32">
            <summary>VFP implementation with 32 double-precision registers.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.VFP3HP">
            <summary>VFPv3 half precision extension.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.VFP4">
            <summary>VFPv4 instruction set.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.Div">
            <summary>SDIV and UDIV instructions.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuIsaFeature.Armada">
            <summary>Marvell Armada instruction extensions.</summary>
        </member>
        <member name="T:Yeppp.ArmCpuSimdFeature">
            <summary>ARM-specific SIMD extensions.</summary>
            <seealso cref="M:Yeppp.Library.IsSupported(Yeppp.CpuSimdFeature)"/>
        </member>
        <member name="T:Yeppp.CpuSimdFeature">
            <summary>SIMD extensions.</summary>
            <seealso cref="P:Yeppp.CpuArchitecture.CpuSimdFeatures"/>
            <seealso cref="M:Yeppp.Library.IsSupported(Yeppp.CpuSimdFeature)"/>
            <seealso cref="T:Yeppp.X86CpuSimdFeature"/>
            <seealso cref="T:Yeppp.ArmCpuSimdFeature"/>
            <seealso cref="T:Yeppp.MipsCpuSimdFeature"/>
            <seealso cref="T:Yeppp.PowerPCCpuSimdFeature"/>
        </member>
        <member name="M:Yeppp.CpuSimdFeature.Equals(Yeppp.CpuSimdFeature)">
            <summary>Compares for equality with another <see cref="T:Yeppp.CpuSimdFeature"/> object.</summary>
            <remarks>Comparison is performed by value.</remarks>
        </member>
        <member name="M:Yeppp.CpuSimdFeature.Equals(System.Object)">
            <summary>Compares for equality with another object.</summary>
            <remarks>Comparison is performed by value.</remarks>
        </member>
        <member name="M:Yeppp.CpuSimdFeature.GetHashCode">
            <summary>Provides a hash for the object.</summary>
            <remarks>Non-equal <see cref="T:Yeppp.CpuSimdFeature"/> objects are guaranteed to have different hashes.</remarks>
        </member>
        <member name="M:Yeppp.CpuSimdFeature.ToString">
            <summary>Provides a string ID for the object.</summary>
            <remarks>The string ID starts with a Latin letter and contains only Latin letters, digits, and underscore symbol.</remarks>
            <seealso cref="P:Yeppp.CpuSimdFeature.Description"/>
        </member>
        <member name="P:Yeppp.CpuSimdFeature.Description">
            <summary>Provides a description for the object.</summary>
            <remarks>The description can contain spaces and non-ASCII characters.</remarks>
            <seealso cref="M:Yeppp.CpuSimdFeature.ToString"/>
        </member>
        <member name="F:Yeppp.ArmCpuSimdFeature.XScale">
            <summary>XScale instructions.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuSimdFeature.WMMX">
            <summary>Wireless MMX instruction set.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuSimdFeature.WMMX2">
            <summary>Wireless MMX 2 instruction set.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuSimdFeature.NEON">
            <summary>NEON (Advanced SIMD) instruction set.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuSimdFeature.NEONHP">
            <summary>NEON (Advanced SIMD) half-precision extension.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuSimdFeature.NEON2">
            <summary>NEON (Advanced SIMD) v2 instruction set.</summary>
        </member>
        <member name="T:Yeppp.ArmCpuSystemFeature">
            <summary>ARM-specific non-ISA processor or system features.</summary>
            <seealso cref="M:Yeppp.Library.IsSupported(Yeppp.CpuSystemFeature)"/>
        </member>
        <member name="T:Yeppp.CpuSystemFeature">
            <summary>Non-ISA processor or system features.</summary>
            <seealso cref="P:Yeppp.CpuArchitecture.CpuSystemFeatures"/>
            <seealso cref="M:Yeppp.Library.IsSupported(Yeppp.CpuSystemFeature)"/>
            <seealso cref="T:Yeppp.X86CpuSystemFeature"/>
            <seealso cref="T:Yeppp.ArmCpuSystemFeature"/>
        </member>
        <member name="F:Yeppp.CpuSystemFeature.CycleCounter">
            <summary>The processor has a built-in cycle counter, and the operating system provides a way to access it.</summary>
        </member>
        <member name="F:Yeppp.CpuSystemFeature.CycleCounter64Bit">
            <summary>The processor has a 64-bit cycle counter, or the operating system provides an abstraction of a 64-bit cycle counter.</summary>
        </member>
        <member name="F:Yeppp.CpuSystemFeature.AddressSpace64Bit">
            <summary>The processor and the operating system allows to use 64-bit pointers.</summary>
        </member>
        <member name="F:Yeppp.CpuSystemFeature.GPRegisters64Bit">
            <summary>The processor and the operating system allows to do 64-bit arithmetical operations on general-purpose registers.</summary>
        </member>
        <member name="F:Yeppp.CpuSystemFeature.MisalignedAccess">
            <summary>The processor and the operating system allows misaligned memory reads and writes.</summary>
        </member>
        <member name="F:Yeppp.CpuSystemFeature.SingleThreaded">
            <summary>The processor or the operating system support at most one hardware thread.</summary>
        </member>
        <member name="M:Yeppp.CpuSystemFeature.Equals(Yeppp.CpuSystemFeature)">
            <summary>Compares for equality with another <see cref="T:Yeppp.CpuSystemFeature"/> object.</summary>
            <remarks>Comparison is performed by value.</remarks>
        </member>
        <member name="M:Yeppp.CpuSystemFeature.Equals(System.Object)">
            <summary>Compares for equality with another object.</summary>
            <remarks>Comparison is performed by value.</remarks>
        </member>
        <member name="M:Yeppp.CpuSystemFeature.GetHashCode">
            <summary>Provides a hash for the object.</summary>
            <remarks>Non-equal <see cref="T:Yeppp.CpuSystemFeature"/> objects are guaranteed to have different hashes.</remarks>
        </member>
        <member name="M:Yeppp.CpuSystemFeature.ToString">
            <summary>Provides a string ID for the object.</summary>
            <remarks>The string ID starts with a Latin letter and contains only Latin letters, digits, and underscore symbol.</remarks>
            <seealso cref="P:Yeppp.CpuSystemFeature.Description"/>
        </member>
        <member name="P:Yeppp.CpuSystemFeature.Description">
            <summary>Provides a description for the object.</summary>
            <remarks>The description can contain spaces and non-ASCII characters.</remarks>
            <seealso cref="M:Yeppp.CpuSystemFeature.ToString"/>
        </member>
        <member name="F:Yeppp.ArmCpuSystemFeature.VFPVectorMode">
            <summary>VFP vector mode is supported in hardware.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuSystemFeature.FPA">
            <summary>The CPU has FPA registers (f0-f7), and the operating system preserves them during context switch.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuSystemFeature.WMMX">
            <summary>The CPU has WMMX registers (wr0-wr15), and the operating system preserves them during context switch.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuSystemFeature.S32">
            <summary>The CPU has s0-s31 VFP registers, and the operating system preserves them during context switch.</summary>
        </member>
        <member name="F:Yeppp.ArmCpuSystemFeature.D32">
            <summary>The CPU has d0-d31 VFP registers, and the operating system preserves them during context switch.</summary>
        </member>
        <member name="T:Yeppp.CpuArchitecture">
            <summary>The basic instruction set architecture of the processor.</summary>
            <seealso cref="M:Yeppp.Library.GetCpuArchitecture"/>
        </member>
        <member name="F:Yeppp.CpuArchitecture.Unknown">
            <summary>Instruction set architecture is not known to the library.</summary>
            <remarks>This value is never returned on supported architectures.</remarks>
        </member>
        <member name="F:Yeppp.CpuArchitecture.X86">
            <summary>x86 or x86-64 ISA.</summary>
        </member>
        <member name="F:Yeppp.CpuArchitecture.ARM">
            <summary>ARM ISA.</summary>
        </member>
        <member name="F:Yeppp.CpuArchitecture.MIPS">
            <summary>MIPS ISA.</summary>
        </member>
        <member name="F:Yeppp.CpuArchitecture.PowerPC">
            <summary>PowerPC ISA.</summary>
        </member>
        <member name="F:Yeppp.CpuArchitecture.IA64">
            <summary>IA64 ISA.</summary>
        </member>
        <member name="F:Yeppp.CpuArchitecture.SPARC">
            <summary>SPARC ISA.</summary>
        </member>
        <member name="M:Yeppp.CpuArchitecture.Equals(Yeppp.CpuArchitecture)">
            <summary>Compares for equality with another <see cref="T:Yeppp.CpuArchitecture"/> object.</summary>
            <remarks>Comparison is performed by value.</remarks>
        </member>
        <member name="M:Yeppp.CpuArchitecture.Equals(System.Object)">
            <summary>Compares for equality with another object.</summary>
            <remarks>Comparison is performed by value.</remarks>
        </member>
        <member name="M:Yeppp.CpuArchitecture.GetHashCode">
            <summary>Provides a hash for the object.</summary>
            <remarks>Non-equal <see cref="T:Yeppp.CpuArchitecture"/> objects are guaranteed to have different hashes.</remarks>
        </member>
        <member name="M:Yeppp.CpuArchitecture.ToString">
            <summary>Provides a string ID for the object.</summary>
            <remarks>The string ID starts with a Latin letter and contains only Latin letters, digits, and underscore symbol.</remarks>
            <seealso cref="P:Yeppp.CpuArchitecture.Description"/>
        </member>
        <member name="P:Yeppp.CpuArchitecture.CpuIsaFeatures">
            <summary>An iterable list of potentially available on this architecture ISA features.</summary>
            <remarks>For #Unknown architecture provides an iterator over generic ISA features.</remarks>
        </member>
        <member name="P:Yeppp.CpuArchitecture.CpuSimdFeatures">
            <summary>An iterable list of potentially available on this architecture SIMD features.</summary>
            <remarks>For #Unknown architecture provides an iterator over generic SIMD features.</remarks>
        </member>
        <member name="P:Yeppp.CpuArchitecture.CpuSystemFeatures">
            <summary>An iterable list of potentially available on this architecture non-ISA CPU and system features.</summary>
            <remarks>For #Unknown architecture provides an iterator over generic non-ISA CPU and system features.</remarks>
        </member>
        <member name="P:Yeppp.CpuArchitecture.Description">
            <summary>Provides a description for the object.</summary>
            <remarks>The description can contain spaces and non-ASCII characters.</remarks>
            <seealso cref="M:Yeppp.CpuArchitecture.ToString"/>
        </member>
        <member name="T:Yeppp.CpuCycleCounterState">
            <summary>The state of the processor cycle counter.</summary>
            <remarks>This class is intended for use only through <see cref="M:Yeppp.Library.AcquireCycleCounter"/> and <see cref="M:Yeppp.Library.ReleaseCycleCounter(Yeppp.CpuCycleCounterState)"/> methods.</remarks>
            <seealso cref="M:Yeppp.Library.AcquireCycleCounter"/>
            <seealso cref="M:Yeppp.Library.ReleaseCycleCounter(Yeppp.CpuCycleCounterState)"/>
        </member>
        <member name="M:Yeppp.CpuCycleCounterState.Finalize">
            <summary>Destroys the state object and releases the allocated system resources if they were not released by a call to <see cref="M:Yeppp.Library.ReleaseCycleCounter(Yeppp.CpuCycleCounterState)"/>.</summary>
        </member>
        <member name="P:Yeppp.CpuCycleCounterState.IsValid">
            <summary>Indicates whether this is a valid state of a processor cycle counter (i.e. it was not yet released via a call to <see cref="M:Yeppp.Library.ReleaseCycleCounter(Yeppp.CpuCycleCounterState)"/>).</summary>
        </member>
        <member name="T:Yeppp.CpuMicroarchitecture">
            <summary>Type of processor microarchitecture.</summary>
            <remarks>Low-level instruction performance characteristics, such as latency and throughput, are constant within microarchitecture.</remarks>
            <remarks>Processors of the same microarchitecture can differ in supported instruction sets and other extensions.</remarks>
            <seealso cref="M:Yeppp.Library.GetCpuMicroarchitecture"/>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Unknown">
            <summary>Microarchitecture is unknown, or the library failed to get information about the microarchitecture from OS</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.P5">
            <summary>Pentium and Pentium MMX microarchitecture.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.P6">
            <summary>Pentium Pro, Pentium II, and Pentium III.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Willamette">
            <summary>Pentium 4 with Willamette, Northwood, or Foster cores.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Prescott">
            <summary>Pentium 4 with Prescott and later cores.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Dothan">
            <summary>Pentium M.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Yonah">
            <summary>Intel Core microarchitecture.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Conroe">
            <summary>Intel Core 2 microarchitecture on 65 nm process.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Penryn">
            <summary>Intel Core 2 microarchitecture on 45 nm process.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Bonnell">
            <summary>Intel Atom on 45 nm process.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Nehalem">
            <summary>Intel Nehalem and Westmere microarchitectures (Core i3/i5/i7 1st gen).</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.SandyBridge">
            <summary>Intel Sandy Bridge microarchitecture (Core i3/i5/i7 2nd gen).</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Saltwell">
            <summary>Intel Atom on 32 nm process.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.IvyBridge">
            <summary>Intel Ivy Bridge microarchitecture (Core i3/i5/i7 3rd gen).</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Haswell">
            <summary>Intel Haswell microarchitecture (Core i3/i5/i7 4th gen).</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Silvermont">
            <summary> Intel Silvermont microarchitecture (22 nm out-of-order Atom).</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.KnightsFerry">
            <summary>Intel Knights Ferry HPC boards.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.KnightsCorner">
            <summary>Intel Knights Corner HPC boards (aka Xeon Phi).</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.K5">
            <summary>AMD K5.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.K6">
            <summary>AMD K6 and alike.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.K7">
            <summary>AMD Athlon and Duron.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Geode">
            <summary>AMD Geode GX and LX.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.K8">
            <summary>AMD Athlon 64, Opteron 64.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.K10">
            <summary>AMD K10 (Barcelona, Istambul, Magny-Cours).</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Bobcat">
            <summary>AMD Bobcat mobile microarchitecture.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Bulldozer">
            <summary>AMD Bulldozer microarchitecture (1st gen K15).</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Piledriver">
            <summary>AMD Piledriver microarchitecture (2nd gen K15).</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Jaguar">
            <summary>AMD Jaguar mobile microarchitecture.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Steamroller">
            <summary>AMD Steamroller microarchitecture (3rd gen K15).</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.StrongARM">
            <summary>DEC/Intel StrongARM processors.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.XScale">
            <summary>Intel/Marvell XScale processors.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.ARM7">
            <summary>ARM7 series.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.ARM9">
            <summary>ARM9 series.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.ARM11">
            <summary>ARM 1136, ARM 1156, ARM 1176, or ARM 11MPCore.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.CortexA5">
            <summary>ARM Cortex-A5.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.CortexA7">
            <summary>ARM Cortex-A7.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.CortexA8">
            <summary>ARM Cortex-A8.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.CortexA9">
            <summary>ARM Cortex-A9.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.CortexA15">
            <summary>ARM Cortex-A15.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Scorpion">
            <summary>Qualcomm Scorpion.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Krait">
            <summary>Qualcomm Krait.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.PJ1">
            <summary>Marvell Sheeva PJ1.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.PJ4">
            <summary>Marvell Sheeva PJ4.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Swift">
            <summary>Apple A6 and A6X processors.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Cyclone">
            <summary>Apple A7 processor.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Itanium">
            <summary>Intel Itanium.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.Itanium2">
            <summary>Intel Itanium 2.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.MIPS24K">
            <summary>MIPS 24K.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.MIPS34K">
            <summary>MIPS 34K.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.MIPS74K">
            <summary>MIPS 74K.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.XBurst">
            <summary>Ingenic XBurst.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.XBurst2">
            <summary>Ingenic XBurst 2.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.PowerPC970">
            <summary>IBM PowerPC 970 (PowerPC G5).</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.POWER4">
            <summary>IBM POWER 4.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.POWER5">
            <summary>IBM POWER 5.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.POWER6">
            <summary>IBM POWER 6.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.POWER7">
            <summary>IBM POWER 7.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.POWER8">
            <summary>IBM POWER 8.</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.PowerPC440">
            <summary>IBM PowerPC 440 (Blue Gene/L processor).</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.PowerPC450">
            <summary>IBM PowerPC 450 (Blue Gene/P processor).</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.PowerPCA2">
            <summary>IBM PowerPC A2 (Blue Gene/Q processor).</summary>
        </member>
        <member name="F:Yeppp.CpuMicroarchitecture.PWRficient">
            <summary>P.A.Semi PWRficient.</summary>
        </member>
        <member name="M:Yeppp.CpuMicroarchitecture.Equals(Yeppp.CpuMicroarchitecture)">
            <summary>Compares for equality with another <see cref="T:Yeppp.CpuMicroarchitecture"/> object.</summary>
            <remarks>Comparison is performed by value.</remarks>
        </member>
        <member name="M:Yeppp.CpuMicroarchitecture.Equals(System.Object)">
            <summary>Compares for equality with another object.</summary>
            <remarks>Comparison is performed by value.</remarks>
        </member>
        <member name="M:Yeppp.CpuMicroarchitecture.GetHashCode">
            <summary>Provides a hash for the object.</summary>
            <remarks>Non-equal <see cref="T:Yeppp.CpuMicroarchitecture"/> objects are guaranteed to have different hashes.</remarks>
        </member>
        <member name="M:Yeppp.CpuMicroarchitecture.ToString">
            <summary>Provides a string ID for the object.</summary>
            <remarks>The string ID starts with a Latin letter and contains only Latin letters, digits, and underscore symbol.</remarks>
            <seealso cref="P:Yeppp.CpuMicroarchitecture.Description"/>
        </member>
        <member name="P:Yeppp.CpuMicroarchitecture.Description">
            <summary>Provides a description for the object.</summary>
            <remarks>The description can contain spaces and non-ASCII characters.</remarks>
            <seealso cref="M:Yeppp.CpuMicroarchitecture.ToString"/>
        </member>
        <member name="T:Yeppp.CpuVendor">
            <summary>The company which designed the processor microarchitecture.</summary>
            <seealso cref="M:Yeppp.Library.GetCpuVendor"/>
        </member>
        <member name="F:Yeppp.CpuVendor.Unknown">
            <summary>Processor vendor is not known to the library, or the library failed to get vendor information from the OS.</summary>
        </member>
        <member name="F:Yeppp.CpuVendor.Intel">
            <summary>Intel Corporation. Vendor of x86, x86-64, IA64, and ARM processor microarchitectures.</summary>
            <remarks>Sold its ARM design subsidiary in 2006. The last ARM processor design was released in 2004.</remarks>
        </member>
        <member name="F:Yeppp.CpuVendor.AMD">
            <summary>Advanced Micro Devices, Inc. Vendor of x86 and x86-64 processor microarchitectures.</summary>
        </member>
        <member name="F:Yeppp.CpuVendor.VIA">
            <summary>VIA Technologies, Inc. Vendor of x86 and x86-64 processor microarchitectures.</summary>
            <remarks>Processors are designed by Centaur Technology, a subsidiary of VIA Technologies.</remarks>
        </member>
        <member name="F:Yeppp.CpuVendor.Transmeta">
            <summary>Transmeta Corporation. Vendor of x86 processor microarchitectures.</summary>
            <remarks>Now defunct. The last processor design was released in 2004.</remarks>
            <remarks>Transmeta processors implemented VLIW ISA and used binary translation to execute x86 code.</remarks>
        </member>
        <member name="F:Yeppp.CpuVendor.Cyrix">
            <summary>Cyrix Corporation. Vendor of x86 processor microarchitectures.</summary>
            <remarks>Now defunct. The last processor design was released in 1996.</remarks>
        </member>
        <member name="F:Yeppp.CpuVendor.Rise">
            <summary>Rise Technology. Vendor of x86 processor microarchitectures.</summary>
            <remarks>Now defunct. The last processor design was released in 1999.</remarks>
        </member>
        <member name="F:Yeppp.CpuVendor.NSC">
            <summary>National Semiconductor. Vendor of x86 processor microarchitectures.</summary>
            <remarks>Sold its x86 design subsidiary in 1999. The last processor design was released in 1998.</remarks>
        </member>
        <member name="F:Yeppp.CpuVendor.SiS">
            <summary>Silicon Integrated Systems. Vendor of x86 processor microarchitectures.</summary>
            <remarks>Sold its x86 design subsidiary in 2001. The last processor design was released in 2001.</remarks>
        </member>
        <member name="F:Yeppp.CpuVendor.NexGen">
            <summary>NexGen. Vendor of x86 processor microarchitectures.</summary>
            <remarks>Now defunct. The last processor design was released in 1994.</remarks>
            <remarks>NexGen designed the first x86 microarchitecture which decomposed x86 instructions into simple microoperations.</remarks>
        </member>
        <member name="F:Yeppp.CpuVendor.UMC">
            <summary>United Microelectronics Corporation. Vendor of x86 processor microarchitectures.</summary>
            <remarks>Ceased x86 in the early 1990s. The last processor design was released in 1991.</remarks>
            <remarks>Designed U5C and U5D processors. Both are 486 level.</remarks>
        </member>
        <member name="F:Yeppp.CpuVendor.RDC">
            <summary>RDC Semiconductor Co., Ltd. Vendor of x86 processor microarchitectures.</summary>
            <remarks>Designes embedded x86 CPUs.</remarks>
        </member>
        <member name="F:Yeppp.CpuVendor.DMP">
            <summary>DM&amp;P Electronics Inc. Vendor of x86 processor microarchitectures.</summary>
            <remarks>Mostly embedded x86 designs.</remarks>
        </member>
        <member name="F:Yeppp.CpuVendor.ARM">
            <summary>ARM Holdings plc. Vendor of ARM processor microarchitectures.</summary>
        </member>
        <member name="F:Yeppp.CpuVendor.Marvell">
            <summary>Marvell Technology Group Ltd. Vendor of ARM processor microarchitectures.</summary>
        </member>
        <member name="F:Yeppp.CpuVendor.Qualcomm">
            <summary>Qualcomm Incorporated. Vendor of ARM processor microarchitectures.</summary>
        </member>
        <member name="F:Yeppp.CpuVendor.DEC">
            <summary>Digital Equipment Corporation. Vendor of ARM processor microarchitecture.</summary>
            <remarks>Sold its ARM designs in 1997. The last processor design was released in 1997.</remarks>
        </member>
        <member name="F:Yeppp.CpuVendor.TI">
            <summary>Texas Instruments Inc. Vendor of ARM processor microarchitectures.</summary>
        </member>
        <member name="F:Yeppp.CpuVendor.Apple">
            <summary>Apple Inc. Vendor of ARM processor microarchitectures.</summary>
        </member>
        <member name="F:Yeppp.CpuVendor.Ingenic">
            <summary>Ingenic Semiconductor. Vendor of MIPS processor microarchitectures.</summary>
        </member>
        <member name="F:Yeppp.CpuVendor.ICT">
            <summary>Institute of Computing Technology of the Chinese Academy of Sciences. Vendor of MIPS processor microarchitectures.</summary>
        </member>
        <member name="F:Yeppp.CpuVendor.MIPS">
            <summary>MIPS Technologies, Inc. Vendor of MIPS processor microarchitectures.</summary>
        </member>
        <member name="F:Yeppp.CpuVendor.IBM">
            <summary>International Business Machines Corporation. Vendor of PowerPC processor microarchitectures.</summary>
        </member>
        <member name="F:Yeppp.CpuVendor.Motorola">
            <summary>Motorola, Inc. Vendor of PowerPC and ARM processor microarchitectures.</summary>
        </member>
        <member name="F:Yeppp.CpuVendor.PASemi">
            <summary>P. A. Semi. Vendor of PowerPC processor microarchitectures.</summary>
            <remarks>Now defunct. The last processor design was released in 2007.</remarks>
        </member>
        <member name="F:Yeppp.CpuVendor.Sun">
            <summary>Sun Microsystems, Inc. Vendor of SPARC processor microarchitectures.</summary>
            <remarks>Now defunct. The last processor design was released in 2008.</remarks>
        </member>
        <member name="F:Yeppp.CpuVendor.Oracle">
            <summary>Oracle Corporation. Vendor of SPARC processor microarchitectures.</summary>
        </member>
        <member name="F:Yeppp.CpuVendor.Fujitsu">
            <summary>Fujitsu Limited. Vendor of SPARC processor microarchitectures.</summary>
        </member>
        <member name="F:Yeppp.CpuVendor.MCST">
            <summary>Moscow Center of SPARC Technologies CJSC. Vendor of SPARC processor microarchitectures.</summary>
        </member>
        <member name="M:Yeppp.CpuVendor.Equals(Yeppp.CpuVendor)">
            <summary>Compares for equality with another <see cref="T:Yeppp.CpuVendor"/> object.</summary>
            <remarks>Comparison is performed by value.</remarks>
        </member>
        <member name="M:Yeppp.CpuVendor.Equals(System.Object)">
            <summary>Compares for equality with another object.</summary>
            <remarks>Comparison is performed by value.</remarks>
        </member>
        <member name="M:Yeppp.CpuVendor.GetHashCode">
            <summary>Provides a hash for the object.</summary>
            <remarks>Non-equal <see cref="T:Yeppp.CpuVendor"/> objects are guaranteed to have different hashes.</remarks>
        </member>
        <member name="M:Yeppp.CpuVendor.ToString">
            <summary>Provides a string ID for the object.</summary>
            <remarks>The string ID starts with a Latin letter and contains only Latin letters, digits, and underscore symbol.</remarks>
            <seealso cref="P:Yeppp.CpuVendor.Description"/>
        </member>
        <member name="P:Yeppp.CpuVendor.Description">
            <summary>Provides a description for the object.</summary>
            <remarks>The description can contain spaces and non-ASCII characters.</remarks>
            <seealso cref="M:Yeppp.CpuVendor.ToString"/>
        </member>
        <member name="T:Yeppp.IA64CpuIsaFeature">
            <summary>IA64-specific ISA extensions.</summary>
            <seealso cref="M:Yeppp.Library.IsSupported(Yeppp.CpuIsaFeature)"/>
        </member>
        <member name="F:Yeppp.IA64CpuIsaFeature.Brl">
            <summary>Long branch instruction.</summary>
        </member>
        <member name="F:Yeppp.IA64CpuIsaFeature.Atomic128">
            <summary>Atomic 128-bit (16-byte) loads, stores, and CAS.</summary>
        </member>
        <member name="F:Yeppp.IA64CpuIsaFeature.Clz">
            <summary>CLZ (count leading zeros) instruction.</summary>
        </member>
        <member name="F:Yeppp.IA64CpuIsaFeature.Mpy4">
            <summary>MPY4 and MPYSHL4 (Truncated 32-bit multiplication) instructions.</summary>
        </member>
        <member name="T:Yeppp.NamespaceDoc">
            <summary>Yeppp! library functions.</summary>
        </member>
        <member name="T:Yeppp.Library">
            <summary>Non-computational functions for checking library version, quering information about processor, and benchmarking.</summary>
        </member>
        <member name="M:Yeppp.Library.Release">
            <summary>Deinitializes Yeppp! library and releases all associated resources.</summary>
            <remarks>This function is inteded for .Net libraries which might be unloaded (e.g. plugins) and should be called immediately before the module is unloaded.</remarks>
            <remarks>Calling Yeppp! functions after after a call to this method is prohibited and might crash the application.</remarks>
            <exception cref="T:System.SystemException">Resources allocated by Yeppp! library could not be unloaded due to memory corruption.</exception>
            <exception cref="T:System.InvalidOperationException">Yeppp! library is already released by this module.</exception>
        </member>
        <member name="M:Yeppp.Library.GetVersion">
            <summary>Provides information about Yeppp! library version.</summary>
            <returns>An object describing Yeppp! library version.</returns>
            <seealso cref="T:Yeppp.Version"/>
        </member>
        <member name="M:Yeppp.Library.IsSupported(Yeppp.CpuIsaFeature)">
            <summary>Checks if the specified ISA extension is supported by the processor.</summary>
            <param name="isaFeature">An object specifying the ISA extension of interest.</param>
            <returns>true if processor supports the specified ISA extension and false otherwise.</returns>
            <seealso cref="T:Yeppp.CpuIsaFeature"/>
            <seealso cref="T:Yeppp.X86CpuIsaFeature"/>
            <seealso cref="T:Yeppp.ArmCpuIsaFeature"/>
            <seealso cref="T:Yeppp.MipsCpuIsaFeature"/>
            <seealso cref="T:Yeppp.IA64CpuIsaFeature"/>
            <seealso cref="T:Yeppp.PowerPCCpuIsaFeature"/>
        </member>
        <member name="M:Yeppp.Library.IsSupported(Yeppp.CpuSimdFeature)">
            <summary>Checks if the specified SIMD extension is supported by the processor.</summary>
            <param name="simdFeature">An object specifying the SIMD extension of interest.</param>
            <returns>true if processor supports the specified SIMD extension and false otherwise.</returns>
            <seealso cref="T:Yeppp.CpuSimdFeature"/>
            <seealso cref="T:Yeppp.X86CpuSimdFeature"/>
            <seealso cref="T:Yeppp.ArmCpuSimdFeature"/>
            <seealso cref="T:Yeppp.MipsCpuSimdFeature"/>
            <seealso cref="T:Yeppp.PowerPCCpuSimdFeature"/>
        </member>
        <member name="M:Yeppp.Library.IsSupported(Yeppp.CpuSystemFeature)">
            <summary>Checks if the specified non-ISA CPU or system extension is supported by the processor.</summary>
            <param name="systemFeature">An object specifying the non-ISA CPU or system extension of interest.</param>
            <returns>true if processor supports the specified non-ISA CPU or system extension and false otherwise.</returns>
            <seealso cref="T:Yeppp.CpuSimdFeature"/>
            <seealso cref="T:Yeppp.X86CpuSystemFeature"/>
            <seealso cref="T:Yeppp.ArmCpuSystemFeature"/>
        </member>
        <member name="M:Yeppp.Library.GetProcessABI">
            <summary>Provides information about the ABI of the running process.</summary>
            <returns>An ABI object with information about the application binary interface (ABI) of the running process.</returns>
            <seealso cref="T:Yeppp.ABI"/>
        </member>
        <member name="M:Yeppp.Library.GetCpuVendor">
            <summary>Provides information about the vendor of the processor.</summary>
            <returns>A CpuVendor object with information about the company which designed the CPU core.</returns>
            <seealso cref="T:Yeppp.CpuVendor"/>
        </member>
        <member name="M:Yeppp.Library.GetCpuArchitecture">
            <summary>Provides information about the architecture of the processor.</summary>
            <returns>A CpuArchitecture instance with information about the architecture of the CPU.</returns>
            <seealso cref="T:Yeppp.CpuArchitecture"/>
        </member>
        <member name="M:Yeppp.Library.GetCpuMicroarchitecture">
            <summary>Provides information about the microarchitecture of the processor.</summary>
            <returns>A CpuMicroarchitecture instance with information about the microarchitecture of the CPU core.</returns>
            <seealso cref="T:Yeppp.CpuMicroarchitecture"/>
        </member>
        <member name="M:Yeppp.Library.AcquireCycleCounter">
            <summary>Initializes the processor cycle counter and starts counting the processor cycles.</summary>
            <remarks>Call <see cref="M:Yeppp.Library.ReleaseCycleCounter(Yeppp.CpuCycleCounterState)"/> to get the number of processor cycles passed.</remarks>
            <remarks>The cycle counters are not guaranteed to be syncronized across different processors/cores in a multiprocessor/multicore system. It is recommended to bind the current thread to a particular logical processor before using this function.</remarks>
            <returns>An object representing the state of the processor cycle counter. Pass this object to <see cref="M:Yeppp.Library.ReleaseCycleCounter(Yeppp.CpuCycleCounterState)"/> to get the number of cycles passed.</returns>
            <exception cref="T:System.PlatformNotSupportedException">The processor does not have a cycle counter or the operating system does not provide access to the CPU cycle counter</exception>
            <exception cref="T:System.SystemException">If the attempt to read the cycle counter or release the OS resources failed inside the OS kernel.</exception>
            <seealso cref="M:Yeppp.Library.ReleaseCycleCounter(Yeppp.CpuCycleCounterState)"/>
        </member>
        <member name="M:Yeppp.Library.ReleaseCycleCounter(Yeppp.CpuCycleCounterState)">
            <summary>Stops counting the processor cycles, releases the system resources associated with the cycle counter, and returns the number of cycles elapsed.</summary>
            <param name="cycleCounter">An object representing the state of the cycle counter returned by <see cref="M:Yeppp.Library.AcquireCycleCounter"/>. The cycle counter should be released only once, and this function invalidates the state object.</param>
            <returns>The number of cycles elapsed since the call to <see cref="M:Yeppp.Library.AcquireCycleCounter"/>.</returns>
            <exception cref="T:System.InvalidOperationException">The cycleCounter object is not a valid state of the cycle counter. This can happen if the cycleCounter object was released previously.</exception>
            <exception cref="T:System.PlatformNotSupportedException">The processor does not have a cycle counter or the operating system does not provide access to the CPU cycle counter</exception>
            <exception cref="T:System.SystemException">If the attempt to read the cycle counter or release the OS resources failed inside the OS kernel.</exception>
            <seealso cref="M:Yeppp.Library.AcquireCycleCounter"/>
        </member>
        <member name="M:Yeppp.Library.GetTimerTicks">
            <summary>Queries the ticks count of the high-resolution system timer.</summary>
            <remarks>The difference in ticks between two time moments divided by timer frequency gives the number of seconds between two time moments.</remarks>
            <returns>The current ticks count of the high-resolution system timer.</returns>
            <exception cref="T:System.SystemException">The attempt to read the high-resolution timer failed inside the OS kernel.</exception>
        </member>
        <member name="M:Yeppp.Library.GetTimerFrequency">
            <summary>Queries the frequency (number of ticks per second) of the high-resolution system timer.</summary>
            <remarks>The difference in ticks between two time moments divided by timer frequency gives the number of seconds between two time moments.</remarks>
            <returns>The frequency of the high-resolution system timer.</returns>
            <exception cref="T:System.SystemException">The attempt to read the high-resolution timer frequency failed inside the OS kernel.</exception>
        </member>
        <member name="M:Yeppp.Library.GetTimerAccuracy">
            <summary>Detects the minimum time difference in nanoseconds which can be measured by the high-resolution system timer.</summary>
            <returns>The accuracy (in nanoseconds) of the high-resolution system timer.</returns>
            <exception cref="T:System.SystemException">If the attempt to measure the accuracy of high-resolution timer failed inside the OS kernel.</exception>
        </member>
        <member name="T:Yeppp.MipsCpuIsaFeature">
            <summary>MIPS-specific ISA extensions.</summary>
            <seealso cref="M:Yeppp.Library.IsSupported(Yeppp.CpuIsaFeature)"/>
        </member>
        <member name="F:Yeppp.MipsCpuIsaFeature.MIPS_I">
            <summary>MIPS I instructions.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuIsaFeature.MIPS_II">
            <summary>MIPS II instructions.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuIsaFeature.MIPS_III">
            <summary>MIPS III instructions.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuIsaFeature.MIPS_IV">
            <summary>MIPS IV instructions.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuIsaFeature.MIPS_V">
            <summary>MIPS V instructions.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuIsaFeature.R1">
            <summary>MIPS32/MIPS64 Release 1 instructions.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuIsaFeature.R2">
            <summary>MIPS32/MIPS64 Release 2 instructions.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuIsaFeature.FPU">
            <summary>FPU with S, D, and W formats and instructions.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuIsaFeature.MIPS16">
            <summary>MIPS16 extension.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuIsaFeature.SmartMIPS">
            <summary>SmartMIPS extension.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuIsaFeature.MT">
            <summary>Multi-threading extension.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuIsaFeature.MicroMIPS">
            <summary>MicroMIPS extension.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuIsaFeature.VZ">
            <summary>MIPS virtualization extension.</summary>
        </member>
        <member name="T:Yeppp.MipsCpuSimdFeature">
            <summary>MIPS-specific SIMD extensions.</summary>
            <seealso cref="M:Yeppp.Library.IsSupported(Yeppp.CpuSimdFeature)"/>
        </member>
        <member name="F:Yeppp.MipsCpuSimdFeature.MDMX">
            <summary>MDMX instruction set.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuSimdFeature.PairedSingle">
            <summary>Paired-single instructions.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuSimdFeature.MIPS3D">
            <summary>MIPS3D instruction set.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuSimdFeature.DSP">
            <summary>MIPS DSP extension.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuSimdFeature.DSP2">
            <summary>MIPS DSP Release 2 extension.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuSimdFeature.GodsonMMX">
            <summary>Loongson (Godson) MMX instruction set.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuSimdFeature.MXU">
            <summary>Ingenic Media Extension.</summary>
        </member>
        <member name="F:Yeppp.MipsCpuSimdFeature.MXU2">
            <summary>Ingenic Media Extension 2.</summary>
        </member>
        <member name="T:Yeppp.PowerPCCpuIsaFeature">
            <summary>PowerPC-specific ISA extensions.</summary>
            <seealso cref="M:Yeppp.Library.IsSupported(Yeppp.CpuIsaFeature)"/>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.FPU">
            <summary>FPU instructions.</summary>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.MCRF">
            <summary>MTOCRF and MFOCRF instructions.</summary>
            <remarks>MTOCRF and MFOCRF are new forms of MTCRF and MFCRF instructions. They were introduced in PowerPC ISA 2.00.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.GPOpt">
            <summary>FSQRT and FSQRTS instructions.</summary>
            <remarks>These optional general-purpose instructions are defined in PowerPC ISA 2.01.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.GfxOpt">
            <summary>FRES, FRSQRTE, and FSEL instructions.</summary>
            <remarks>These optional graphics instructions are defined in PowerPC ISA 2.01.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.GfxOpt202">
            <summary>FRE and FRSQRTES instructions.</summary>
            <remarks>These optional graphics instructions are defined in PowerPC ISA 2.02.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.MAC">
            <summary>Legacy integer multiply-accumulate instructions.</summary>
            <remarks>These multiply-accumulate instructions were implemented in some 400 series processors.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.EFPS">
            <summary>Embedded Floating-Point Single Precision instructions.</summary>
            <remarks>These instructions are defined in POWER ISA 2.03 in SPE.Embedded Float Scalar Single category.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.EFPD">
            <summary>Embedded Floating-Point Double Precision instructions.</summary>
            <remarks>These instructions are defined in POWER ISA 2.03 in SPE.Embedded Float Scalar Double category.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.ISEL">
            <summary>ISEL instruction.</summary>
            <remarks>ISEL instruction is defined as optional (Phased-In) in Power ISA 2.03.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.POPCNTB">
            <summary>POPCNTB instruction.</summary>
            <remarks>POPCNTB instruction is defined as optional (Phased-In) in Power ISA 2.03.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.FRI">
            <summary>FRIN, FRIZ, FRIP, and FRIM instructions.</summary>
            <remarks>Floating-point round-to-integer instructions are defined as optional (Phased-In) in Power ISA 2.03 in Floating-Point category.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.FPU205">
            <summary>FCPSGN and LFIWAX instructions.</summary>
            <remarks>These instruction is defined in Power ISA 2.05 in Floating-Point category.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.LFDP">
            <summary>LFDP, STFDP, LFDPX, and STFDPX instructions.</summary>
            <remarks>Floating-point load/store double pair instructions are defined as optional (Phased-Out) in Power ISA 2.05 in Floating-Point category.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.DFP">
            <summary>Decimal Floating-Point instructions.</summary>
            <remarks>These instructions are defined in POWER ISA 2.05 in Decimal Floating-Point category.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.ISA205">
            <summary>CMPB, PRTYW, and PRTYD instructions.</summary>
            <remarks>These instructions are defined in Power ISA 2.05.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.BPERMD">
            <summary>BPERMD instruction.</summary>
            <remarks>This instruction is defined as optional (Embedded.Phased-In, Server) in Power ISA 2.06.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.DIVWE">
            <summary>Extended division instructions (DIVWE, DIVWEO, DIVWEU, DIVWEUO, DIVDE, DIVDEO, DIVDEU, and DIVDEUO).</summary>
            <remarks>These instructions are defined as optional (Embedded.Phased-In, Server) in Power ISA 2.06.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.POPCNTW">
            <summary>POPCNTW and POPCNTD instructions.</summary>
            <remarks>These instructions are defined as optional (Embedded.Phased-In, Server) in Power ISA 2.06.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.ISA206">
            <summary>LDBRX and STDBRX instructions.</summary>
            <remarks>These instructions are defined in Power ISA 2.06.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.LFIWZX">
            <summary>LFIWZX instruction.</summary>
            <remarks>This instruction is defined as optional (Phased-In) in Power ISA 2.06 in Floating-Point category.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.FCTIWU">
            <summary>FCTIDU, FCTIDUZ, FCTIWU, FCTIWUZ, FCFIDU, FCFIDS, and FCFIDUS instructions.</summary>
            <remarks>These instructions are defined as optional (Phased-In) in Power ISA 2.06 in Floating-Point category.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.FTDIV">
            <summary>FTDIV and FTSQRT instructions.</summary>
            <remarks>These instructions are defined as optional (Phased-In) in Power ISA 2.06 in Floating-Point category.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.LBARX">
            <summary>LBARX, LHARX, STBCX, and STHCX instructions.</summary>
            <remarks>These instructions are defined as optional (Phased-In) in Power ISA 2.06 in Floating-Point category.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.LQARX">
            <summary>LQARX and STQCX instructions.</summary>
            <remarks>These instructions are defined in Power ISA 2.07 in Load/Store Quadword category.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.LQ">
            <summary>LQ and STQ instructions (accessible in problem state).</summary>
            <remarks>LQ and STQ instructions are redefined as accessible in problem state in Power ISA 2.07 in Load/Store Quadword category.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.VMXCrypto">
            <summary>VCIPHER, VCIPHERLAST, VNCIPHER, VNCIPHERLAST, VSBOX, VSHASIGMAW, and VSHASIGMAD instructions.</summary>
            <remarks>These instructions are defined in Power ISA 2.07 in VMX.Crypto category.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuIsaFeature.TM">
            <summary>Transactional Memory instructions.</summary>
            <remarks>These instructions are defined in Power ISA 2.07 in Transactional Memory category.</remarks>
        </member>
        <member name="T:Yeppp.PowerPCCpuSimdFeature">
            <summary>PowerPC-specific SIMD extensions.</summary>
            <seealso cref="M:Yeppp.Library.IsSupported(Yeppp.CpuSimdFeature)"/>
        </member>
        <member name="F:Yeppp.PowerPCCpuSimdFeature.VMX">
            <summary>Vector Media eXtension (aka AltiVec and Velocity Engine).</summary>
        </member>
        <member name="F:Yeppp.PowerPCCpuSimdFeature.VMXRAID">
            <summary>VMX VPERMXOR instruction from Power ISA 2.07.</summary>
        </member>
        <member name="F:Yeppp.PowerPCCpuSimdFeature.VMX207">
            <summary>Additional VMX instructions from Power ISA 2.07.</summary>
        </member>
        <member name="F:Yeppp.PowerPCCpuSimdFeature.VSX">
            <summary>VSX instructions (Vector-Scalar eXtensions).</summary>
        </member>
        <member name="F:Yeppp.PowerPCCpuSimdFeature.VSX207">
            <summary>Additional VSX instructions from Power ISA 2.07.</summary>
        </member>
        <member name="F:Yeppp.PowerPCCpuSimdFeature.SPE">
            <summary>SPE (Signal Processing Engine).</summary>
        </member>
        <member name="F:Yeppp.PowerPCCpuSimdFeature.EFPV">
            <summary>Embedded Floating-Point Vector instructions.</summary>
        </member>
        <member name="F:Yeppp.PowerPCCpuSimdFeature.DoubleHummer">
            <summary>Double Hummer instruction set.</summary>
            <remarks>2-wide double precision floating-point SIMD for Blue Gene/L and Blue Gene/P supercomputers.</remarks>
        </member>
        <member name="F:Yeppp.PowerPCCpuSimdFeature.QPX">
            <summary>Quad Processing eXtension.</summary>
            <remarks>4-wide double precision floating-point SIMD for Blue Gene/Q supercomputers.</remarks>
        </member>
        <member name="T:Yeppp.Version">
            <summary>Contains information about @Yeppp library version.</summary>
            <seealso cref="M:Yeppp.Library.GetVersion"/>
        </member>
        <member name="M:Yeppp.Version.ToString">
            <summary>Provides a string representation for all parts of the version.</summary>
            <returns>The full version string in the format "major.minor.patch.build (release name)".</returns>
        </member>
        <member name="P:Yeppp.Version.Major">
            <summary>The major version number of Yeppp! library.</summary>
            <remarks>Library releases with the same major versions are guaranteed to be API- and ABI-compatible.</remarks>
        </member>
        <member name="P:Yeppp.Version.Minor">
            <summary>The minor version number of Yeppp! library.</summary>
            <remarks>A change in minor versions indicates addition of new features, and major bug-fixes.</remarks>
        </member>
        <member name="P:Yeppp.Version.Patch">
            <summary>The patch level of Yeppp! library.</summary>
            <remarks>A version with a higher patch level indicates minor bug-fixes.</remarks>
        </member>
        <member name="P:Yeppp.Version.Build">
            <summary>The build number of Yeppp! library.</summary>
            <remarks>The build number is unique for the fixed combination of major, minor, and patch-level versions.</remarks>
        </member>
        <member name="P:Yeppp.Version.ReleaseName">
            <summary>Human-readable name of this release of Yeppp! library</summary>
            <remarks>The release name may contain non-ASCII characters.</remarks>
        </member>
        <member name="T:Yeppp.X86CpuIsaFeature">
            <summary>x86-specific ISA extensions.</summary>
            <seealso cref="M:Yeppp.Library.IsSupported(Yeppp.CpuIsaFeature)"/>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.FPU">
            <summary>x87 FPU integrated on chip.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.Cpuid">
            <summary>x87 CPUID instruction.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.Rdtsc">
            <summary>RDTSC instruction.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.CMOV">
            <summary>CMOV, FCMOV, and FCOMI/FUCOMI instructions.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.SYSENTER">
            <summary>SYSENTER and SYSEXIT instructions.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.SYSCALL">
            <summary>SYSCALL and SYSRET instructions.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.MSR">
            <summary>RDMSR and WRMSR instructions.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.Clflush">
            <summary>CLFLUSH instruction.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.MONITOR">
            <summary>MONITOR and MWAIT instructions.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.FXSAVE">
            <summary>FXSAVE and FXRSTOR instructions.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.XSAVE">
            <summary>XSAVE, XRSTOR, XGETBV, and XSETBV instructions.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.Cmpxchg8b">
            <summary>CMPXCHG8B instruction.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.Cmpxchg16b">
            <summary>CMPXCHG16B instruction.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.X64">
            <summary>Support for 64-bit mode.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.LahfSahf64">
            <summary>Support for LAHF and SAHF instructions in 64-bit mode.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.FsGsBase">
            <summary>RDFSBASE, RDGSBASE, WRFSBASE, and WRGSBASE instructions.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.Movbe">
            <summary>MOVBE instruction.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.Popcnt">
            <summary>POPCNT instruction.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.Lzcnt">
            <summary>LZCNT instruction.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.BMI">
            <summary>BMI instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.BMI2">
            <summary>BMI 2 instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.TBM">
            <summary>TBM instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.Rdrand">
            <summary>RDRAND instruction.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.ACE">
            <summary>Padlock Advanced Cryptography Engine on chip.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.ACE2">
            <summary>Padlock Advanced Cryptography Engine 2 on chip.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.RNG">
            <summary>Padlock Random Number Generator on chip.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.PHE">
            <summary>Padlock Hash Engine on chip.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.PMM">
            <summary>Padlock Montgomery Multiplier on chip.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.AES">
            <summary>AES instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.Pclmulqdq">
            <summary>PCLMULQDQ instruction.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.Rdtscp">
            <summary>RDTSCP instruction.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.LPW">
            <summary>Lightweight Profiling extension.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.HLE">
            <summary>Hardware Lock Elision extension.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.RTM">
            <summary>Restricted Transactional Memory extension.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.Xtest">
            <summary>XTEST instruction.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.Rdseed">
            <summary>RDSEED instruction.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.ADX">
            <summary>ADCX and ADOX instructions.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.SHA">
            <summary>SHA instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuIsaFeature.MPX">
            <summary>Memory Protection Extension.</summary>
        </member>
        <member name="T:Yeppp.X86CpuSimdFeature">
            <summary>x86-specific SIMD extensions.</summary>
            <seealso cref="M:Yeppp.Library.IsSupported(Yeppp.CpuSimdFeature)"/>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.MMX">
            <summary>MMX instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.MMXPlus">
            <summary>MMX+ instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.EMMX">
            <summary>EMMX instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.ThreeDNow">
            <summary>3dnow! instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.ThreeDNowPlus">
            <summary>3dnow!+ instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.ThreeDNowPrefetch">
            <summary>3dnow! prefetch instructions.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.ThreeDNowGeode">
            <summary>Geode 3dnow! instructions.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.SSE">
            <summary>SSE instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.SSE2">
            <summary>SSE 2 instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.SSE3">
            <summary>SSE 3 instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.SSSE3">
            <summary>SSSE 3 instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.SSE4_1">
            <summary>SSE 4.1 instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.SSE4_2">
            <summary>SSE 4.2 instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.SSE4A">
            <summary>SSE 4A instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.AVX">
            <summary>AVX instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.AVX2">
            <summary>AVX 2 instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.XOP">
            <summary>XOP instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.F16C">
            <summary>F16C instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.FMA3">
            <summary>FMA3 instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.FMA4">
            <summary>FMA4 instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.KNF">
            <summary>Knights Ferry (aka Larrabee) instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.KNC">
            <summary>Knights Corner (aka Xeon Phi) instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.AVX512F">
            <summary>AVX-512 Foundation instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.AVX512CD">
            <summary>AVX-512 Conflict Detection instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.AVX512ER">
            <summary>AVX-512 Exponential and Reciprocal instruction set.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSimdFeature.AVX512PF">
            <summary>AVX-512 Prefetch instruction set.</summary>
        </member>
        <member name="T:Yeppp.X86CpuSystemFeature">
            <summary>x86-specific non-ISA processor or system features.</summary>
            <seealso cref="M:Yeppp.Library.IsSupported(Yeppp.CpuSystemFeature)"/>
        </member>
        <member name="F:Yeppp.X86CpuSystemFeature.ACE">
            <summary>Processor and the operating system support the Padlock Advanced Cryptography Engine.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSystemFeature.ACE2">
            <summary>Processor and the operating system support the Padlock Advanced Cryptography Engine 2.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSystemFeature.RNG">
            <summary>Processor and the operating system support the Padlock Random Number Generator.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSystemFeature.PHE">
            <summary>Processor and the operating system support the Padlock Hash Engine.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSystemFeature.PMM">
            <summary>Processor and the operating system support the Padlock Montgomery Multiplier.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSystemFeature.MisalignedSSE">
            <summary>Processor allows to use misaligned memory operands in SSE instructions other than loads and stores.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSystemFeature.FPU">
            <summary>The CPU has x87 registers, and the operating system preserves them during context switch.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSystemFeature.XMM">
            <summary>The CPU has xmm (SSE) registers, and the operating system preserves them during context switch.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSystemFeature.YMM">
            <summary>The CPU has ymm (AVX) registers, and the operating system preserves them during context switch.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSystemFeature.ZMM">
            <summary>The CPU has zmm (MIC or AVX-512) registers, and the operating system preserves them during context switch.</summary>
        </member>
        <member name="F:Yeppp.X86CpuSystemFeature.BND">
            <summary>The CPU has bnd (MPX) registers, and the operating system preserved them during context switch.</summary>
        </member>
        <member name="T:Yeppp.Math">
            <summary>Vector mathematical functions</summary>
            <summary>Vector mathematical functions</summary>
            <summary>Vector mathematical functions</summary>
            <summary>Vector mathematical functions</summary>
            <summary>Vector mathematical functions</summary>
            <summary>Vector mathematical functions</summary>
        </member>
        <member name="M:Yeppp.Math.Cos_V64f_V64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Computes cosine on double precision (64-bit) floating-point elements.</summary>
            <param name="xArray">Input array.</param>
            <param name="xOffset">Offset of the first element in xArray.</param>
            <param name="yArray">Output array.</param>
            <param name="yOffset">Offset of the first element in yArray.</param>
            <param name="length">The length of the subarrays to be used in computation.</param>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Math.Cos_V64f_V64f(System.Double*,System.Double*,System.Int32)">
            <summary>Computes cosine on an array of double precision (64-bit) floating-point elements.</summary>
            <param name="x">Pointer to the array of elements on which cosine will be computed.</param>
            <param name="y">Pointer the array where the computed cosines will be stored.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Math.EvaluatePolynomial_V32fV32f_V32f(System.Single[],System.Int32,System.Single[],System.Int32,System.Single[],System.Int32,System.Int32,System.Int32)">
            <summary>Evaluates polynomial with single precision (32-bit) floating-point coefficients on an array of single precision (32-bit) floating-point elements.</summary>
            <param name="xArray">Array of elements on which the polynomial will be evaluated.</param>
            <param name="xOffset">Offset of the first element in xArray.</param>
            <param name="coefArray">Array of polynomial coefficients.</param>
            <param name="coefOffset">Offset of the first element in yArray.</param>
            <param name="yArray">Array where the result of polynomial evaluation will be stored.</param>
            <param name="yOffset">Offset of the first element in yArray.</param>
            <param name="coefCount">The length of the slice of coef to be used in computation.</param>
            <param name="length">The length of the slice of xArray and yArray to use in computation.</param>
            <exception cref="T:System.NullReferenceException">If coefArray, xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If coefArray, xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If coefCount or length is negative or coefCount is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If coefOffset is negative, coefOffset + coefCount exceeds the length of coefArray, xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, coefCount is negative, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Math.EvaluatePolynomial_V64fV64f_V64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Double[],System.Int32,System.Int32,System.Int32)">
            <summary>Evaluates polynomial with double precision (64-bit) floating-point coefficients on an array of double precision (64-bit) floating-point elements.</summary>
            <param name="xArray">Array of elements on which the polynomial will be evaluated.</param>
            <param name="xOffset">Offset of the first element in xArray.</param>
            <param name="coefArray">Array of polynomial coefficients.</param>
            <param name="coefOffset">Offset of the first element in yArray.</param>
            <param name="yArray">Array where the result of polynomial evaluation will be stored.</param>
            <param name="yOffset">Offset of the first element in yArray.</param>
            <param name="coefCount">The length of the slice of coef to be used in computation.</param>
            <param name="length">The length of the slice of xArray and yArray to use in computation.</param>
            <exception cref="T:System.NullReferenceException">If coefArray, xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If coefArray, xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If coefCount or length is negative or coefCount is zero.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If coefOffset is negative, coefOffset + coefCount exceeds the length of coefArray, xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, coefCount is negative, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Math.EvaluatePolynomial_V32fV32f_V32f(System.Single*,System.Single*,System.Single*,System.Int32,System.Int32)">
            <summary>Evaluates polynomial with single precision (32-bit) floating-point coefficients on an array of single precision (32-bit) floating-point elements.</summary>
            <param name="x">Pointer to the array of elements on which the polynomial will be evaluated.</param>
            <param name="coef">Pointer to the array of polynomial coefficients.</param>
            <param name="y">Pointer the array where the result of polynomial evaluation will be stored.</param>
            <param name="coefCount">Number of polynomial coefficients. Should equal the polynomial degree plus one.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If coef, x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If coef, x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If coefCount or length is negative or coefCount is zero.</exception>
        </member>
        <member name="M:Yeppp.Math.EvaluatePolynomial_V64fV64f_V64f(System.Double*,System.Double*,System.Double*,System.Int32,System.Int32)">
            <summary>Evaluates polynomial with double precision (64-bit) floating-point coefficients on an array of double precision (64-bit) floating-point elements.</summary>
            <param name="x">Pointer to the array of elements on which the polynomial will be evaluated.</param>
            <param name="coef">Pointer to the array of polynomial coefficients.</param>
            <param name="y">Pointer the array where the result of polynomial evaluation will be stored.</param>
            <param name="coefCount">Number of polynomial coefficients. Should equal the polynomial degree plus one.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If coef, x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If coef, x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If coefCount or length is negative or coefCount is zero.</exception>
        </member>
        <member name="M:Yeppp.Math.Exp_V64f_V64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Computes exponent on double precision (64-bit) floating-point elements.</summary>
            <param name="xArray">Input array.</param>
            <param name="xOffset">Offset of the first element in xArray.</param>
            <param name="yArray">Output array.</param>
            <param name="yOffset">Offset of the first element in yArray.</param>
            <param name="length">Length of the subarrays to be used in computation.</param>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Math.Exp_V64f_V64f(System.Double*,System.Double*,System.Int32)">
            <summary>Computes base-e exponent on an array of double precision (64-bit) floating-point elements.</summary>
            <param name="x">Pointer to the array of elements on which exponent will be computed.</param>
            <param name="y">Pointer the array where the computed exponents will be stored.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Math.Log_V64f_V64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Computes natural logarithm on double precision (64-bit) floating-point elements.</summary>
            <param name="xArray">Input array.</param>
            <param name="xOffset">Offset of the first element in xArray.</param>
            <param name="yArray">Output array.</param>
            <param name="yOffset">Offset of the first element in yArray.</param>
            <param name="length">The length of the subarrays to be used in computation.</param>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Math.Log_V64f_V64f(System.Double*,System.Double*,System.Int32)">
            <summary>Computes natural logarithm on an array of double precision (64-bit) floating-point elements.</summary>
            <param name="x">Pointer to the array of elements on which logarithm will be computed.</param>
            <param name="y">Pointer the array where the computed logarithms will be stored.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Math.Sin_V64f_V64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Computes sine on double precision (64-bit) floating-point elements.</summary>
            <param name="xArray">Input array.</param>
            <param name="xOffset">Offset of the first element in xArray.</param>
            <param name="yArray">Output array.</param>
            <param name="yOffset">Offset of the first element in yArray.</param>
            <param name="length">The length of the subarrays to be used in computation.</param>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Math.Sin_V64f_V64f(System.Double*,System.Double*,System.Int32)">
            <summary>Computes sine on an array of double precision (64-bit) floating-point elements.</summary>
            <param name="x">Pointer to the array of elements on which sine will be computed.</param>
            <param name="y">Pointer the array where the computed sines will be stored.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
        <member name="M:Yeppp.Math.Tan_V64f_V64f(System.Double[],System.Int32,System.Double[],System.Int32,System.Int32)">
            <summary>Computes tangent on double precision (64-bit) floating-point elements.</summary>
            <param name="xArray">Input array.</param>
            <param name="xOffset">Offset of the first element in xArray.</param>
            <param name="yArray">Output array.</param>
            <param name="yOffset">Offset of the first element in yArray.</param>
            <param name="length">The length of the slices of xArray and yArray to use in computation.</param>
            <exception cref="T:System.NullReferenceException">If xArray or yArray is null.</exception>
            <exception cref="T:System.DataMisalignedException">If xArray or yArray is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If xOffset is negative, xOffset + length exceeds the length of xArray, yOffset is negative, yOffset + length exceeds the length of yArray, or length is negative.</exception>
        </member>
        <member name="M:Yeppp.Math.Tan_V64f_V64f(System.Double*,System.Double*,System.Int32)">
            <summary>Computes tangent on an array of double precision (64-bit) floating-point elements.</summary>
            <param name="x">Pointer to the array of elements on which tangent will be computed.</param>
            <param name="y">Pointer the array where the computed tangents will be stored.</param>
            <param name="length">Length of the arrays specified by x and y.</param>
            <exception cref="T:System.NullReferenceException">If x or y is null.</exception>
            <exception cref="T:System.DataMisalignedException">If x or y is not naturally aligned.</exception>
            <exception cref="T:System.ArgumentException">If length is negative.</exception>
        </member>
    </members>
</doc>
